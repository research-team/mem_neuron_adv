
mem_neuro_adv_stm32f205_brd1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004014  08004014  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800401c  0800401c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  08004094  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004094  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe7a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b9  00000000  00000000  0002ff13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00032f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec70  00000000  00000000  00033d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc85  00000000  00000000  00052988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd50b  00000000  00000000  0006260d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011fb18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  0011fb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000070 	.word	0x20000070
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003fe0 	.word	0x08003fe0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000074 	.word	0x20000074
 80001c0:	08003fe0 	.word	0x08003fe0

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b96e 	b.w	80004b8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 8083 	bne.w	800030c <__udivmoddi4+0x118>
 8000206:	428a      	cmp	r2, r1
 8000208:	4617      	mov	r7, r2
 800020a:	d947      	bls.n	800029c <__udivmoddi4+0xa8>
 800020c:	fab2 f382 	clz	r3, r2
 8000210:	b14b      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000212:	f1c3 0120 	rsb	r1, r3, #32
 8000216:	fa05 fe03 	lsl.w	lr, r5, r3
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	409f      	lsls	r7, r3
 8000220:	ea41 0e0e 	orr.w	lr, r1, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	fbbe fcf8 	udiv	ip, lr, r8
 800022e:	fa1f f987 	uxth.w	r9, r7
 8000232:	fb08 e21c 	mls	r2, r8, ip, lr
 8000236:	fb0c f009 	mul.w	r0, ip, r9
 800023a:	0c21      	lsrs	r1, r4, #16
 800023c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	18ba      	adds	r2, r7, r2
 8000246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800024a:	f080 8118 	bcs.w	800047e <__udivmoddi4+0x28a>
 800024e:	4290      	cmp	r0, r2
 8000250:	f240 8115 	bls.w	800047e <__udivmoddi4+0x28a>
 8000254:	f1ac 0c02 	sub.w	ip, ip, #2
 8000258:	443a      	add	r2, r7
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000260:	fb08 2210 	mls	r2, r8, r0, r2
 8000264:	fb00 f109 	mul.w	r1, r0, r9
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a1      	cmp	r1, r4
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x92>
 8000272:	193c      	adds	r4, r7, r4
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 8103 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800027c:	42a1      	cmp	r1, r4
 800027e:	f240 8100 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000282:	3802      	subs	r0, #2
 8000284:	443c      	add	r4, r7
 8000286:	1a64      	subs	r4, r4, r1
 8000288:	2100      	movs	r1, #0
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa4>
 8000290:	2200      	movs	r2, #0
 8000292:	40dc      	lsrs	r4, r3
 8000294:	e9c6 4200 	strd	r4, r2, [r6]
 8000298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029c:	b902      	cbnz	r2, 80002a0 <__udivmoddi4+0xac>
 800029e:	deff      	udf	#255	; 0xff
 80002a0:	fab2 f382 	clz	r3, r2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14f      	bne.n	8000348 <__udivmoddi4+0x154>
 80002a8:	1a8d      	subs	r5, r1, r2
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002b0:	fa1f f882 	uxth.w	r8, r2
 80002b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002bc:	fb08 f00c 	mul.w	r0, r8, ip
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0xe6>
 80002ca:	197d      	adds	r5, r7, r5
 80002cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0xe4>
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	f200 80e9 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 80002d8:	4694      	mov	ip, r2
 80002da:	1a2d      	subs	r5, r5, r0
 80002dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	b2a4      	uxth	r4, r4
 80002ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ee:	45a0      	cmp	r8, r4
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x10e>
 80002f2:	193c      	adds	r4, r7, r4
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x10c>
 80002fa:	45a0      	cmp	r8, r4
 80002fc:	f200 80d9 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000300:	4610      	mov	r0, r2
 8000302:	eba4 0408 	sub.w	r4, r4, r8
 8000306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030a:	e7c0      	b.n	800028e <__udivmoddi4+0x9a>
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x12e>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80b1 	beq.w	8000478 <__udivmoddi4+0x284>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0x1ce>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0x140>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80b9 	bhi.w	80004a6 <__udivmoddi4+0x2b2>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0aa      	beq.n	8000298 <__udivmoddi4+0xa4>
 8000342:	e9c6 4e00 	strd	r4, lr, [r6]
 8000346:	e7a7      	b.n	8000298 <__udivmoddi4+0xa4>
 8000348:	409f      	lsls	r7, r3
 800034a:	f1c3 0220 	rsb	r2, r3, #32
 800034e:	40d1      	lsrs	r1, r2
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	fa24 f202 	lsr.w	r2, r4, r2
 8000364:	409d      	lsls	r5, r3
 8000366:	fb00 fc08 	mul.w	ip, r0, r8
 800036a:	432a      	orrs	r2, r5
 800036c:	0c15      	lsrs	r5, r2, #16
 800036e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000372:	45ac      	cmp	ip, r5
 8000374:	fa04 f403 	lsl.w	r4, r4, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x19a>
 800037a:	197d      	adds	r5, r7, r5
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	f080 808f 	bcs.w	80004a2 <__udivmoddi4+0x2ae>
 8000384:	45ac      	cmp	ip, r5
 8000386:	f240 808c 	bls.w	80004a2 <__udivmoddi4+0x2ae>
 800038a:	3802      	subs	r0, #2
 800038c:	443d      	add	r5, r7
 800038e:	eba5 050c 	sub.w	r5, r5, ip
 8000392:	fbb5 f1fe 	udiv	r1, r5, lr
 8000396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800039a:	fb01 f908 	mul.w	r9, r1, r8
 800039e:	b295      	uxth	r5, r2
 80003a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003a4:	45a9      	cmp	r9, r5
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x1c4>
 80003a8:	197d      	adds	r5, r7, r5
 80003aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80003ae:	d274      	bcs.n	800049a <__udivmoddi4+0x2a6>
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d972      	bls.n	800049a <__udivmoddi4+0x2a6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	eba5 0509 	sub.w	r5, r5, r9
 80003bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003c0:	e778      	b.n	80002b4 <__udivmoddi4+0xc0>
 80003c2:	f1c1 0720 	rsb	r7, r1, #32
 80003c6:	408b      	lsls	r3, r1
 80003c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d0:	fa25 f407 	lsr.w	r4, r5, r7
 80003d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003dc:	fa1f f88c 	uxth.w	r8, ip
 80003e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80003e4:	fa20 f307 	lsr.w	r3, r0, r7
 80003e8:	fb09 fa08 	mul.w	sl, r9, r8
 80003ec:	408d      	lsls	r5, r1
 80003ee:	431d      	orrs	r5, r3
 80003f0:	0c2b      	lsrs	r3, r5, #16
 80003f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	fa00 f301 	lsl.w	r3, r0, r1
 8000400:	d909      	bls.n	8000416 <__udivmoddi4+0x222>
 8000402:	eb1c 0404 	adds.w	r4, ip, r4
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295
 800040a:	d248      	bcs.n	800049e <__udivmoddi4+0x2aa>
 800040c:	45a2      	cmp	sl, r4
 800040e:	d946      	bls.n	800049e <__udivmoddi4+0x2aa>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	4464      	add	r4, ip
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	fbb4 f0fe 	udiv	r0, r4, lr
 800041e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000422:	fb00 fa08 	mul.w	sl, r0, r8
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x24e>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d22d      	bcs.n	8000496 <__udivmoddi4+0x2a2>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d92b      	bls.n	8000496 <__udivmoddi4+0x2a2>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	464d      	mov	r5, r9
 8000454:	d319      	bcc.n	800048a <__udivmoddi4+0x296>
 8000456:	d016      	beq.n	8000486 <__udivmoddi4+0x292>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x27e>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb64 0405 	sbc.w	r4, r4, r5
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	431f      	orrs	r7, r3
 800046c:	40cc      	lsrs	r4, r1
 800046e:	e9c6 7400 	strd	r7, r4, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	4631      	mov	r1, r6
 800047a:	4630      	mov	r0, r6
 800047c:	e70c      	b.n	8000298 <__udivmoddi4+0xa4>
 800047e:	468c      	mov	ip, r1
 8000480:	e6eb      	b.n	800025a <__udivmoddi4+0x66>
 8000482:	4610      	mov	r0, r2
 8000484:	e6ff      	b.n	8000286 <__udivmoddi4+0x92>
 8000486:	4543      	cmp	r3, r8
 8000488:	d2e6      	bcs.n	8000458 <__udivmoddi4+0x264>
 800048a:	ebb8 0e02 	subs.w	lr, r8, r2
 800048e:	eb69 050c 	sbc.w	r5, r9, ip
 8000492:	3801      	subs	r0, #1
 8000494:	e7e0      	b.n	8000458 <__udivmoddi4+0x264>
 8000496:	4628      	mov	r0, r5
 8000498:	e7d3      	b.n	8000442 <__udivmoddi4+0x24e>
 800049a:	4611      	mov	r1, r2
 800049c:	e78c      	b.n	80003b8 <__udivmoddi4+0x1c4>
 800049e:	4681      	mov	r9, r0
 80004a0:	e7b9      	b.n	8000416 <__udivmoddi4+0x222>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e773      	b.n	800038e <__udivmoddi4+0x19a>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e749      	b.n	800033e <__udivmoddi4+0x14a>
 80004aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ae:	443d      	add	r5, r7
 80004b0:	e713      	b.n	80002da <__udivmoddi4+0xe6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	e724      	b.n	8000302 <__udivmoddi4+0x10e>

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <HAL_GPIO_EXTI_Callback>:
static void MX_USART2_UART_Init(void);
static void MX_SPI3_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_0) {
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d106      	bne.n	80004da <HAL_GPIO_EXTI_Callback+0x1e>
	  SET_BITN(flags,0);
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_GPIO_EXTI_Callback+0x28>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <HAL_GPIO_EXTI_Callback+0x28>)
 80004d8:	701a      	strb	r2, [r3, #0]
  }
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	2000008c 	.word	0x2000008c

080004e8 <set_cmd>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	SET_BITN(flags,2);
}
void set_cmd(uint8_t num,uint8_t cmd,uint16_t val){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	460b      	mov	r3, r1
 80004f4:	71bb      	strb	r3, [r7, #6]
 80004f6:	4613      	mov	r3, r2
 80004f8:	80bb      	strh	r3, [r7, #4]
	uint8_t cs_data[1];
	cs_data[0]=~(1<<num);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2201      	movs	r2, #1
 80004fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000502:	b2db      	uxtb	r3, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	b2db      	uxtb	r3, r3
 8000508:	753b      	strb	r3, [r7, #20]
	uint8_t res_data_tx[2];

	//read datasheet carefully
	//00 0001 00000 00000
	//0000 0100 0000 0000
	res_data_tx[0]=(cmd<<2)|(val>>8);
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	b25a      	sxtb	r2, r3
 8000510:	88bb      	ldrh	r3, [r7, #4]
 8000512:	0a1b      	lsrs	r3, r3, #8
 8000514:	b29b      	uxth	r3, r3
 8000516:	b25b      	sxtb	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b25b      	sxtb	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	733b      	strb	r3, [r7, #12]
	res_data_tx[1]=val&0XFF;
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_CS_GPIO_Port, CS_CS_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2110      	movs	r1, #16
 800052a:	4819      	ldr	r0, [pc, #100]	; (8000590 <set_cmd+0xa8>)
 800052c:	f001 f9d4 	bl	80018d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, cs_data, 1, 1000);
 8000530:	f107 0114 	add.w	r1, r7, #20
 8000534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000538:	2201      	movs	r2, #1
 800053a:	4816      	ldr	r0, [pc, #88]	; (8000594 <set_cmd+0xac>)
 800053c:	f002 fa80 	bl	8002a40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_CS_GPIO_Port, CS_CS_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	4812      	ldr	r0, [pc, #72]	; (8000590 <set_cmd+0xa8>)
 8000546:	f001 f9c7 	bl	80018d8 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, res_data_tx,res_data_rx, 2, 1000);
 800054a:	f107 0210 	add.w	r2, r7, #16
 800054e:	f107 010c 	add.w	r1, r7, #12
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2302      	movs	r3, #2
 800055a:	480f      	ldr	r0, [pc, #60]	; (8000598 <set_cmd+0xb0>)
 800055c:	f002 fbac 	bl	8002cb8 <HAL_SPI_TransmitReceive>

	cs_data[0]=0xFF;
 8000560:	23ff      	movs	r3, #255	; 0xff
 8000562:	753b      	strb	r3, [r7, #20]
	HAL_GPIO_WritePin(CS_CS_GPIO_Port, CS_CS_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2110      	movs	r1, #16
 8000568:	4809      	ldr	r0, [pc, #36]	; (8000590 <set_cmd+0xa8>)
 800056a:	f001 f9b5 	bl	80018d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, cs_data, 1, 1000);
 800056e:	f107 0114 	add.w	r1, r7, #20
 8000572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000576:	2201      	movs	r2, #1
 8000578:	4806      	ldr	r0, [pc, #24]	; (8000594 <set_cmd+0xac>)
 800057a:	f002 fa61 	bl	8002a40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_CS_GPIO_Port, CS_CS_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2110      	movs	r1, #16
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <set_cmd+0xa8>)
 8000584:	f001 f9a8 	bl	80018d8 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020000 	.word	0x40020000
 8000594:	20000098 	.word	0x20000098
 8000598:	20000198 	.word	0x20000198

0800059c <set_res>:
void set_res(uint8_t num,uint16_t val){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	80bb      	strh	r3, [r7, #4]
	set_cmd(num,1,val);
 80005ac:	88ba      	ldrh	r2, [r7, #4]
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2101      	movs	r1, #1
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff98 	bl	80004e8 <set_cmd>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	; 0x2c
 80005c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fea7 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f9bf 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 fb85 	bl	8000cdc <MX_GPIO_Init>
  MX_RTC_Init();
 80005d2:	f000 fa1b 	bl	8000a0c <MX_RTC_Init>
  MX_SPI1_Init();
 80005d6:	f000 fa71 	bl	8000abc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005da:	f000 fb2b 	bl	8000c34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005de:	f000 fb53 	bl	8000c88 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80005e2:	f000 faa1 	bl	8000b28 <MX_SPI3_Init>
  MX_TIM1_Init();
 80005e6:	f000 fad5 	bl	8000b94 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fed1 	bl	8001394 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //enable O1 and O2
  //0011 0001 0000 0000 0000 0000
  uint8_t data1[3]={0x31,0x00,0x03};
 80005f2:	4aab      	ldr	r2, [pc, #684]	; (80008a0 <main+0x2e0>)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	6812      	ldr	r2, [r2, #0]
 80005f8:	4611      	mov	r1, r2
 80005fa:	8019      	strh	r1, [r3, #0]
 80005fc:	3302      	adds	r3, #2
 80005fe:	0c12      	lsrs	r2, r2, #16
 8000600:	701a      	strb	r2, [r3, #0]
//  HAL_SPI_TransmitReceive(&hspi1, data1,data2, 3, 1000);
//  HAL_GPIO_WritePin(CSPOW_GPIO_Port, CSPOW_Pin, GPIO_PIN_SET);
//  HAL_Delay(1);

  //set trigger level once, never touch again and change mode for weight update
  data1[0]=0xB0;
 8000602:	23b0      	movs	r3, #176	; 0xb0
 8000604:	713b      	strb	r3, [r7, #4]
  data1[1]=0x01;
 8000606:	2301      	movs	r3, #1
 8000608:	717b      	strb	r3, [r7, #5]
  data1[2]=0x9A;
 800060a:	239a      	movs	r3, #154	; 0x9a
 800060c:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(CSPOW_GPIO_Port, CSPOW_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2102      	movs	r1, #2
 8000612:	48a4      	ldr	r0, [pc, #656]	; (80008a4 <main+0x2e4>)
 8000614:	f001 f960 	bl	80018d8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, data1,data2, 3, 1000);
 8000618:	463a      	mov	r2, r7
 800061a:	1d39      	adds	r1, r7, #4
 800061c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2303      	movs	r3, #3
 8000624:	48a0      	ldr	r0, [pc, #640]	; (80008a8 <main+0x2e8>)
 8000626:	f002 fb47 	bl	8002cb8 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CSPOW_GPIO_Port, CSPOW_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2102      	movs	r1, #2
 800062e:	489d      	ldr	r0, [pc, #628]	; (80008a4 <main+0x2e4>)
 8000630:	f001 f952 	bl	80018d8 <HAL_GPIO_WritePin>
  //change mode for resistor
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000634:	4b9c      	ldr	r3, [pc, #624]	; (80008a8 <main+0x2e8>)
 8000636:	2201      	movs	r2, #1
 8000638:	615a      	str	r2, [r3, #20]
  if (HAL_SPI_Init(&hspi1) != HAL_OK){
 800063a:	489b      	ldr	r0, [pc, #620]	; (80008a8 <main+0x2e8>)
 800063c:	f002 f977 	bl	800292e <HAL_SPI_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <main+0x8a>
	  Error_Handler();
 8000646:	f000 fc27 	bl	8000e98 <Error_Handler>
  }

  uint8_t i=0;
 800064a:	2300      	movs	r3, #0
 800064c:	777b      	strb	r3, [r7, #29]

  for(i=0;i<8;i++){
 800064e:	2300      	movs	r3, #0
 8000650:	777b      	strb	r3, [r7, #29]
 8000652:	e015      	b.n	8000680 <main+0xc0>
	  set_cmd(i, 7, 2);
 8000654:	7f7b      	ldrb	r3, [r7, #29]
 8000656:	2202      	movs	r2, #2
 8000658:	2107      	movs	r1, #7
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff44 	bl	80004e8 <set_cmd>
  	  set_res(i,(i+1)*120);
 8000660:	7f7b      	ldrb	r3, [r7, #29]
 8000662:	3301      	adds	r3, #1
 8000664:	b29b      	uxth	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	b29a      	uxth	r2, r3
 8000670:	7f7b      	ldrb	r3, [r7, #29]
 8000672:	4611      	mov	r1, r2
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff91 	bl	800059c <set_res>
  for(i=0;i<8;i++){
 800067a:	7f7b      	ldrb	r3, [r7, #29]
 800067c:	3301      	adds	r3, #1
 800067e:	777b      	strb	r3, [r7, #29]
 8000680:	7f7b      	ldrb	r3, [r7, #29]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d9e6      	bls.n	8000654 <main+0x94>
//    }
//  for(i=2;i<8;i++){
//  	  set_res(i,200);
//      }

  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	210f      	movs	r1, #15
 800068a:	4888      	ldr	r0, [pc, #544]	; (80008ac <main+0x2ec>)
 800068c:	f001 f924 	bl	80018d8 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim1);
 8000690:	4887      	ldr	r0, [pc, #540]	; (80008b0 <main+0x2f0>)
 8000692:	f002 fda9 	bl	80031e8 <HAL_TIM_Base_Start_IT>
  uint8_t rx_data[board_cnt];
 8000696:	4b87      	ldr	r3, [pc, #540]	; (80008b4 <main+0x2f4>)
 8000698:	781c      	ldrb	r4, [r3, #0]
 800069a:	4623      	mov	r3, r4
 800069c:	3b01      	subs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
 80006a0:	b2e0      	uxtb	r0, r4
 80006a2:	f04f 0100 	mov.w	r1, #0
 80006a6:	f04f 0200 	mov.w	r2, #0
 80006aa:	f04f 0300 	mov.w	r3, #0
 80006ae:	00cb      	lsls	r3, r1, #3
 80006b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006b4:	00c2      	lsls	r2, r0, #3
 80006b6:	b2e0      	uxtb	r0, r4
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	f04f 0200 	mov.w	r2, #0
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	00cb      	lsls	r3, r1, #3
 80006c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006ca:	00c2      	lsls	r2, r0, #3
 80006cc:	4623      	mov	r3, r4
 80006ce:	3307      	adds	r3, #7
 80006d0:	08db      	lsrs	r3, r3, #3
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	ebad 0d03 	sub.w	sp, sp, r3
 80006d8:	ab02      	add	r3, sp, #8
 80006da:	3300      	adds	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  uint8_t tx_data[board_cnt];
 80006de:	4b75      	ldr	r3, [pc, #468]	; (80008b4 <main+0x2f4>)
 80006e0:	781c      	ldrb	r4, [r3, #0]
 80006e2:	4623      	mov	r3, r4
 80006e4:	3b01      	subs	r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	b2e0      	uxtb	r0, r4
 80006ea:	f04f 0100 	mov.w	r1, #0
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	f04f 0300 	mov.w	r3, #0
 80006f6:	00cb      	lsls	r3, r1, #3
 80006f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006fc:	00c2      	lsls	r2, r0, #3
 80006fe:	b2e0      	uxtb	r0, r4
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	f04f 0200 	mov.w	r2, #0
 8000708:	f04f 0300 	mov.w	r3, #0
 800070c:	00cb      	lsls	r3, r1, #3
 800070e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000712:	00c2      	lsls	r2, r0, #3
 8000714:	4623      	mov	r3, r4
 8000716:	3307      	adds	r3, #7
 8000718:	08db      	lsrs	r3, r3, #3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	ebad 0d03 	sub.w	sp, sp, r3
 8000720:	ab02      	add	r3, sp, #8
 8000722:	3300      	adds	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  uint8_t data_tmp=0;
 8000726:	2300      	movs	r3, #0
 8000728:	77bb      	strb	r3, [r7, #30]
  uint8_t ext_info_tmp=0;
 800072a:	2300      	movs	r3, #0
 800072c:	77fb      	strb	r3, [r7, #31]
  for(i=0;i<board_cnt;i++){
 800072e:	2300      	movs	r3, #0
 8000730:	777b      	strb	r3, [r7, #29]
 8000732:	e00a      	b.n	800074a <main+0x18a>
	  tx_data[i]=0;
 8000734:	7f7b      	ldrb	r3, [r7, #29]
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	2100      	movs	r1, #0
 800073a:	54d1      	strb	r1, [r2, r3]
	  rx_data[i]=0;
 800073c:	7f7b      	ldrb	r3, [r7, #29]
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	2100      	movs	r1, #0
 8000742:	54d1      	strb	r1, [r2, r3]
  for(i=0;i<board_cnt;i++){
 8000744:	7f7b      	ldrb	r3, [r7, #29]
 8000746:	3301      	adds	r3, #1
 8000748:	777b      	strb	r3, [r7, #29]
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <main+0x2f4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	7f7a      	ldrb	r2, [r7, #29]
 8000750:	429a      	cmp	r2, r3
 8000752:	d3ef      	bcc.n	8000734 <main+0x174>
//	  tx_data[0]=0x55;
//	  tx_data[1]=0xAA;
//	  tx_data[2]=0xF5;
//  	  HAL_UART_Transmit_DMA(&huart2, tx_data, board_cnt);
//  }
  uint16_t delay=1;
 8000754:	2301      	movs	r3, #1
 8000756:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status;
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
	  status=HAL_UART_Receive(&huart1,  rx_data, board_cnt,10000);
 8000758:	6979      	ldr	r1, [r7, #20]
 800075a:	4b56      	ldr	r3, [pc, #344]	; (80008b4 <main+0x2f4>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f242 7310 	movw	r3, #10000	; 0x2710
 8000764:	4854      	ldr	r0, [pc, #336]	; (80008b8 <main+0x2f8>)
 8000766:	f003 fa3c 	bl	8003be2 <HAL_UART_Receive>
 800076a:	4603      	mov	r3, r0
 800076c:	727b      	strb	r3, [r7, #9]
	  if(status!=HAL_TIMEOUT){
 800076e:	7a7b      	ldrb	r3, [r7, #9]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d0f1      	beq.n	8000758 <main+0x198>
		  HAL_GPIO_TogglePin(GPIOC, LED4_Pin);
 8000774:	2108      	movs	r1, #8
 8000776:	484d      	ldr	r0, [pc, #308]	; (80008ac <main+0x2ec>)
 8000778:	f001 f8c6 	bl	8001908 <HAL_GPIO_TogglePin>
		  data_tmp=rx_data[board_num];
 800077c:	4b4f      	ldr	r3, [pc, #316]	; (80008bc <main+0x2fc>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	5c9b      	ldrb	r3, [r3, r2]
 8000786:	77bb      	strb	r3, [r7, #30]
		  //copy info about input types
		  ext_info_tmp=ex_channels;
 8000788:	4b4d      	ldr	r3, [pc, #308]	; (80008c0 <main+0x300>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	77fb      	strb	r3, [r7, #31]
		  i=0;
 800078e:	2300      	movs	r3, #0
 8000790:	777b      	strb	r3, [r7, #29]
		  while(data_tmp>0){
 8000792:	e031      	b.n	80007f8 <main+0x238>
			  if((data_tmp&0x01)==1){
 8000794:	7fbb      	ldrb	r3, [r7, #30]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d023      	beq.n	80007e6 <main+0x226>
				  if((ext_info_tmp&0x01)==1){
 800079e:	7ffb      	ldrb	r3, [r7, #31]
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00c      	beq.n	80007c2 <main+0x202>
					  //if is exitatory pull down b port
					  HAL_GPIO_WritePin(Bport[i], Bpin[i], GPIO_PIN_RESET);
 80007a8:	7f7b      	ldrb	r3, [r7, #29]
 80007aa:	4a46      	ldr	r2, [pc, #280]	; (80008c4 <main+0x304>)
 80007ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007b0:	7f7b      	ldrb	r3, [r7, #29]
 80007b2:	4a45      	ldr	r2, [pc, #276]	; (80008c8 <main+0x308>)
 80007b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	f001 f88c 	bl	80018d8 <HAL_GPIO_WritePin>
 80007c0:	e00b      	b.n	80007da <main+0x21a>
				  }
				  else{
					  //if is inhibitory pull down a port
					  HAL_GPIO_WritePin(Aport[i], Apin[i], GPIO_PIN_RESET);
 80007c2:	7f7b      	ldrb	r3, [r7, #29]
 80007c4:	4a41      	ldr	r2, [pc, #260]	; (80008cc <main+0x30c>)
 80007c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007ca:	7f7b      	ldrb	r3, [r7, #29]
 80007cc:	4a40      	ldr	r2, [pc, #256]	; (80008d0 <main+0x310>)
 80007ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	f001 f87f 	bl	80018d8 <HAL_GPIO_WritePin>
				  }
				  spike_wid=0;
 80007da:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <main+0x314>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
				  spike_wid_rst=1;
 80007e0:	4b3d      	ldr	r3, [pc, #244]	; (80008d8 <main+0x318>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
			  }
			  i++;
 80007e6:	7f7b      	ldrb	r3, [r7, #29]
 80007e8:	3301      	adds	r3, #1
 80007ea:	777b      	strb	r3, [r7, #29]
			  ext_info_tmp>>=1;
 80007ec:	7ffb      	ldrb	r3, [r7, #31]
 80007ee:	085b      	lsrs	r3, r3, #1
 80007f0:	77fb      	strb	r3, [r7, #31]
			  data_tmp>>=1;
 80007f2:	7fbb      	ldrb	r3, [r7, #30]
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	77bb      	strb	r3, [r7, #30]
		  while(data_tmp>0){
 80007f8:	7fbb      	ldrb	r3, [r7, #30]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1ca      	bne.n	8000794 <main+0x1d4>
		  }

		  while(spike_wid<30){}
 80007fe:	bf00      	nop
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <main+0x314>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b1d      	cmp	r3, #29
 8000806:	d9fb      	bls.n	8000800 <main+0x240>
		  for(i=0;i<8;i++){
 8000808:	2300      	movs	r3, #0
 800080a:	777b      	strb	r3, [r7, #29]
 800080c:	e01a      	b.n	8000844 <main+0x284>
			  HAL_GPIO_WritePin(Aport[i], Apin[i], GPIO_PIN_SET);
 800080e:	7f7b      	ldrb	r3, [r7, #29]
 8000810:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <main+0x30c>)
 8000812:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000816:	7f7b      	ldrb	r3, [r7, #29]
 8000818:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <main+0x310>)
 800081a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	f001 f859 	bl	80018d8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Bport[i], Bpin[i], GPIO_PIN_SET);
 8000826:	7f7b      	ldrb	r3, [r7, #29]
 8000828:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <main+0x304>)
 800082a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800082e:	7f7b      	ldrb	r3, [r7, #29]
 8000830:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <main+0x308>)
 8000832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	f001 f84d 	bl	80018d8 <HAL_GPIO_WritePin>
		  for(i=0;i<8;i++){
 800083e:	7f7b      	ldrb	r3, [r7, #29]
 8000840:	3301      	adds	r3, #1
 8000842:	777b      	strb	r3, [r7, #29]
 8000844:	7f7b      	ldrb	r3, [r7, #29]
 8000846:	2b07      	cmp	r3, #7
 8000848:	d9e1      	bls.n	800080e <main+0x24e>
		  }
		  //output signal generated
		  if(READ_BITN(flags,0)==1){
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <main+0x31c>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d046      	beq.n	80008e4 <main+0x324>
			  RESET_BITN(flags,0);
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <main+0x31c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	f023 0301 	bic.w	r3, r3, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <main+0x31c>)
 8000862:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_TogglePin(GPIOC, LED2_Pin);
 8000864:	2102      	movs	r1, #2
 8000866:	4811      	ldr	r0, [pc, #68]	; (80008ac <main+0x2ec>)
 8000868:	f001 f84e 	bl	8001908 <HAL_GPIO_TogglePin>
			  //need to update weight according to wired math and what spiked last time
			  //Hebb_weight_update(rx_data[board_num]);
			  tx_data[0]=rx_data[0];
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	701a      	strb	r2, [r3, #0]
			  tx_data[1]=rx_data[1]|0x1F;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	f043 031f 	orr.w	r3, r3, #31
 800087c:	b2da      	uxtb	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	705a      	strb	r2, [r3, #1]
			  tx_data[2]=(rx_data[2]<<1)|1;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	789b      	ldrb	r3, [r3, #2]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	b25b      	sxtb	r3, r3
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	b25b      	sxtb	r3, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	709a      	strb	r2, [r3, #2]
			  //change last spike time to negative value for emulating refactory period
			  last_spike=-100;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <main+0x320>)
 8000898:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	e030      	b.n	8000902 <main+0x342>
 80008a0:	08003ff8 	.word	0x08003ff8
 80008a4:	40020000 	.word	0x40020000
 80008a8:	20000198 	.word	0x20000198
 80008ac:	40020800 	.word	0x40020800
 80008b0:	20000150 	.word	0x20000150
 80008b4:	20000000 	.word	0x20000000
 80008b8:	200000f0 	.word	0x200000f0
 80008bc:	2000008d 	.word	0x2000008d
 80008c0:	20000001 	.word	0x20000001
 80008c4:	20000044 	.word	0x20000044
 80008c8:	20000014 	.word	0x20000014
 80008cc:	20000024 	.word	0x20000024
 80008d0:	20000004 	.word	0x20000004
 80008d4:	20000094 	.word	0x20000094
 80008d8:	20000095 	.word	0x20000095
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	20000090 	.word	0x20000090
//			  if (delay>100){
//				  delay-=100;
//			  }
		  }
		  else{
			  tx_data[0]=rx_data[0];
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	701a      	strb	r2, [r3, #0]
			  tx_data[1]=rx_data[1];
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	785a      	ldrb	r2, [r3, #1]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	705a      	strb	r2, [r3, #1]
			  tx_data[2]=rx_data[2]&(~0x03);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	f023 0303 	bic.w	r3, r3, #3
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	709a      	strb	r2, [r3, #2]
//			  delay+=100;
		  }
		  HAL_Delay(delay);
 8000902:	897b      	ldrh	r3, [r7, #10]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fd45 	bl	8001394 <HAL_Delay>
		  HAL_UART_Transmit(&huart2, tx_data, board_cnt,1000);
 800090a:	68f9      	ldr	r1, [r7, #12]
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <main+0x384>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b29a      	uxth	r2, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <main+0x388>)
 8000918:	f003 f8d1 	bl	8003abe <HAL_UART_Transmit>
		  for(i=0;i<board_cnt;i++){
 800091c:	2300      	movs	r3, #0
 800091e:	777b      	strb	r3, [r7, #29]
 8000920:	e00a      	b.n	8000938 <main+0x378>
			  tx_data[i]=0;
 8000922:	7f7b      	ldrb	r3, [r7, #29]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	2100      	movs	r1, #0
 8000928:	54d1      	strb	r1, [r2, r3]
			  rx_data[i]=0;
 800092a:	7f7b      	ldrb	r3, [r7, #29]
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	2100      	movs	r1, #0
 8000930:	54d1      	strb	r1, [r2, r3]
		  for(i=0;i<board_cnt;i++){
 8000932:	7f7b      	ldrb	r3, [r7, #29]
 8000934:	3301      	adds	r3, #1
 8000936:	777b      	strb	r3, [r7, #29]
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <main+0x384>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	7f7a      	ldrb	r2, [r7, #29]
 800093e:	429a      	cmp	r2, r3
 8000940:	d3ef      	bcc.n	8000922 <main+0x362>
	  status=HAL_UART_Receive(&huart1,  rx_data, board_cnt,10000);
 8000942:	e709      	b.n	8000758 <main+0x198>
 8000944:	20000000 	.word	0x20000000
 8000948:	200001f0 	.word	0x200001f0

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b096      	sub	sp, #88	; 0x58
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000956:	2230      	movs	r2, #48	; 0x30
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fb38 	bl	8003fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800097e:	230a      	movs	r3, #10
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000982:	2301      	movs	r3, #1
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000986:	2310      	movs	r3, #16
 8000988:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800098a:	2301      	movs	r3, #1
 800098c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000992:	2300      	movs	r3, #0
 8000994:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000996:	230d      	movs	r3, #13
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 195;
 800099a:	23c3      	movs	r3, #195	; 0xc3
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099e:	2302      	movs	r3, #2
 80009a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a2:	2304      	movs	r3, #4
 80009a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 ffde 	bl	800196c <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009b6:	f000 fa6f 	bl	8000e98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2104      	movs	r1, #4
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fa17 	bl	8001e0c <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009e4:	f000 fa58 	bl	8000e98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009e8:	2304      	movs	r3, #4
 80009ea:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fc53 	bl	80022a0 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a00:	f000 fa4a 	bl	8000e98 <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3758      	adds	r7, #88	; 0x58
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a20:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a22:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <MX_RTC_Init+0xac>)
 8000a24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a2e:	227f      	movs	r2, #127	; 0x7f
 8000a30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a34:	22ff      	movs	r2, #255	; 0xff
 8000a36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a4a:	481a      	ldr	r0, [pc, #104]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a4c:	f001 fd1e 	bl	800248c <HAL_RTC_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8000a56:	f000 fa1f 	bl	8000e98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	4619      	mov	r1, r3
 8000a74:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a76:	f001 fd93 	bl	80025a0 <HAL_RTC_SetTime>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_RTC_Init+0x78>
  {
    Error_Handler();
 8000a80:	f000 fa0a 	bl	8000e98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a84:	2301      	movs	r3, #1
 8000a86:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MX_RTC_Init+0xa8>)
 8000a9c:	f001 fe36 	bl	800270c <HAL_RTC_SetDate>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 f9f7 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000130 	.word	0x20000130
 8000ab8:	40002800 	.word	0x40002800

08000abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af0:	2228      	movs	r2, #40	; 0x28
 8000af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b0e:	f001 ff0e 	bl	800292e <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f000 f9be 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000198 	.word	0x20000198
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <MX_SPI3_Init+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b58:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_SPI3_Init+0x64>)
 8000b7a:	f001 fed8 	bl	800292e <HAL_SPI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b84:	f000 f988 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000098 	.word	0x20000098
 8000b90:	40003c00 	.word	0x40003c00

08000b94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <MX_TIM1_Init+0x9c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000bb8:	2278      	movs	r2, #120	; 0x78
 8000bba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000bc4:	2264      	movs	r2, #100	; 0x64
 8000bc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000bdc:	f002 fab4 	bl	8003148 <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000be6:	f000 f957 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000bf8:	f002 fc6c 	bl	80034d4 <HAL_TIM_ConfigClockSource>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000c02:	f000 f949 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_TIM1_Init+0x98>)
 8000c14:	f002 fe7a 	bl	800390c <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000c1e:	f000 f93b 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000150 	.word	0x20000150
 8000c30:	40010000 	.word	0x40010000

08000c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_USART1_UART_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c40:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	f002 feda 	bl	8003a24 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c76:	f000 f90f 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000f0 	.word	0x200000f0
 8000c84:	40011000 	.word	0x40011000

08000c88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <MX_USART2_UART_Init+0x50>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000c94:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2208      	movs	r2, #8
 8000cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	f002 feb0 	bl	8003a24 <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cca:	f000 f8e5 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001f0 	.word	0x200001f0
 8000cd8:	40004400 	.word	0x40004400

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b49      	ldr	r3, [pc, #292]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a41      	ldr	r2, [pc, #260]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a3a      	ldr	r2, [pc, #232]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a33      	ldr	r2, [pc, #204]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <MX_GPIO_Init+0x140>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	210f      	movs	r1, #15
 8000d66:	482e      	ldr	r0, [pc, #184]	; (8000e20 <MX_GPIO_Init+0x144>)
 8000d68:	f000 fdb6 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSPOW_Pin|CS_CS_Pin|Q4_Pin|Q2_Pin
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f648 1112 	movw	r1, #35090	; 0x8912
 8000d72:	482c      	ldr	r0, [pc, #176]	; (8000e24 <MX_GPIO_Init+0x148>)
 8000d74:	f000 fdb0 	bl	80018d8 <HAL_GPIO_WritePin>
                          |Q1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Q7_Pin|Q8_Pin|Q12_Pin|Q10_Pin
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000d7e:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_GPIO_Init+0x144>)
 8000d80:	f000 fdaa 	bl	80018d8 <HAL_GPIO_WritePin>
                          |Q9_Pin|Q3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Q6_Pin|Q5_Pin|Q15_Pin|Q16_Pin
 8000d84:	2201      	movs	r2, #1
 8000d86:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000d8a:	4827      	ldr	r0, [pc, #156]	; (8000e28 <MX_GPIO_Init+0x14c>)
 8000d8c:	f000 fda4 	bl	80018d8 <HAL_GPIO_WritePin>
                          |Q14_Pin|Q13_Pin|Q11_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           Q7_Pin Q8_Pin Q12_Pin Q10_Pin
                           Q9_Pin Q3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000d90:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000d94:	617b      	str	r3, [r7, #20]
                          |Q7_Pin|Q8_Pin|Q12_Pin|Q10_Pin
                          |Q9_Pin|Q3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <MX_GPIO_Init+0x144>)
 8000daa:	f000 fbf7 	bl	800159c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_Pin */
  GPIO_InitStruct.Pin = OUT_Pin;
 8000dae:	2301      	movs	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_GPIO_Init+0x150>)
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <MX_GPIO_Init+0x148>)
 8000dc2:	f000 fbeb 	bl	800159c <HAL_GPIO_Init>

  /*Configure GPIO pins : CSPOW_Pin CS_CS_Pin Q4_Pin Q2_Pin
                           Q1_Pin */
  GPIO_InitStruct.Pin = CSPOW_Pin|CS_CS_Pin|Q4_Pin|Q2_Pin
 8000dc6:	f648 1312 	movw	r3, #35090	; 0x8912
 8000dca:	617b      	str	r3, [r7, #20]
                          |Q1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_GPIO_Init+0x148>)
 8000de0:	f000 fbdc 	bl	800159c <HAL_GPIO_Init>

  /*Configure GPIO pins : Q6_Pin Q5_Pin Q15_Pin Q16_Pin
                           Q14_Pin Q13_Pin Q11_Pin */
  GPIO_InitStruct.Pin = Q6_Pin|Q5_Pin|Q15_Pin|Q16_Pin
 8000de4:	f24f 4303 	movw	r3, #62467	; 0xf403
 8000de8:	617b      	str	r3, [r7, #20]
                          |Q14_Pin|Q13_Pin|Q11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <MX_GPIO_Init+0x14c>)
 8000dfe:	f000 fbcd 	bl	800159c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2006      	movs	r0, #6
 8000e08:	f000 fb9d 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e0c:	2006      	movs	r0, #6
 8000e0e:	f000 fbb6 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	10110000 	.word	0x10110000

08000e30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d102      	bne.n	8000e48 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000e42:	f000 fa8b 	bl	800135c <HAL_IncTick>
		  spike_wid_rst=0;
		  spike_wid=0;
	  }
    }
  /* USER CODE END Callback 1 */
}
 8000e46:	e019      	b.n	8000e7c <HAL_TIM_PeriodElapsedCallback+0x4c>
  else if (htim->Instance == TIM1) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d114      	bne.n	8000e7c <HAL_TIM_PeriodElapsedCallback+0x4c>
	  last_spike+=1;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e5a:	6013      	str	r3, [r2, #0]
	  spike_wid+=1;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e66:	701a      	strb	r2, [r3, #0]
	  if(spike_wid_rst==1){
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d105      	bne.n	8000e7c <HAL_TIM_PeriodElapsedCallback+0x4c>
		  spike_wid_rst=0;
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
		  spike_wid=0;
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40002000 	.word	0x40002000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	20000090 	.word	0x20000090
 8000e90:	20000094 	.word	0x20000094
 8000e94:	20000095 	.word	0x20000095

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <Error_Handler+0x8>
	...

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_MspInit+0x48>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <HAL_MspInit+0x48>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HAL_MspInit+0x48>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_MspInit+0x48>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_MspInit+0x48>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_MspInit+0x48>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <HAL_RTC_MspInit+0x24>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d102      	bne.n	8000f08 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_RTC_MspInit+0x28>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40002800 	.word	0x40002800
 8000f18:	42470e3c 	.word	0x42470e3c

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a3a      	ldr	r2, [pc, #232]	; (8001024 <HAL_SPI_MspInit+0x108>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d13c      	bne.n	8000fb8 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a38      	ldr	r2, [pc, #224]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	4b32      	ldr	r3, [pc, #200]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a31      	ldr	r2, [pc, #196]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f76:	23a0      	movs	r3, #160	; 0xa0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f86:	2305      	movs	r3, #5
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4826      	ldr	r0, [pc, #152]	; (800102c <HAL_SPI_MspInit+0x110>)
 8000f92:	f000 fb03 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f96:	2340      	movs	r3, #64	; 0x40
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481e      	ldr	r0, [pc, #120]	; (800102c <HAL_SPI_MspInit+0x110>)
 8000fb2:	f000 faf3 	bl	800159c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fb6:	e031      	b.n	800101c <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <HAL_SPI_MspInit+0x114>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d12c      	bne.n	800101c <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_SPI_MspInit+0x10c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ffa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800100c:	2306      	movs	r3, #6
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <HAL_SPI_MspInit+0x118>)
 8001018:	f000 fac0 	bl	800159c <HAL_GPIO_Init>
}
 800101c:	bf00      	nop
 800101e:	3730      	adds	r7, #48	; 0x30
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40013000 	.word	0x40013000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	40003c00 	.word	0x40003c00
 8001034:	40020800 	.word	0x40020800

08001038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_TIM_Base_MspInit+0x48>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d115      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_TIM_Base_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <HAL_TIM_Base_MspInit+0x4c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_TIM_Base_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2019      	movs	r0, #25
 800106c:	f000 fa6b 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001070:	2019      	movs	r0, #25
 8001072:	f000 fa84 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40010000 	.word	0x40010000
 8001084:	40023800 	.word	0x40023800

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a32      	ldr	r2, [pc, #200]	; (8001170 <HAL_UART_MspInit+0xe8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d12d      	bne.n	8001106 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <HAL_UART_MspInit+0xec>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a30      	ldr	r2, [pc, #192]	; (8001174 <HAL_UART_MspInit+0xec>)
 80010b4:	f043 0310 	orr.w	r3, r3, #16
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <HAL_UART_MspInit+0xec>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_UART_MspInit+0xec>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a29      	ldr	r2, [pc, #164]	; (8001174 <HAL_UART_MspInit+0xec>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_UART_MspInit+0xec>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010f4:	2307      	movs	r3, #7
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	481e      	ldr	r0, [pc, #120]	; (8001178 <HAL_UART_MspInit+0xf0>)
 8001100:	f000 fa4c 	bl	800159c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001104:	e030      	b.n	8001168 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <HAL_UART_MspInit+0xf4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d12b      	bne.n	8001168 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_UART_MspInit+0xec>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_UART_MspInit+0xec>)
 800111a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_UART_MspInit+0xec>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_UART_MspInit+0xec>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_UART_MspInit+0xec>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_UART_MspInit+0xec>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001148:	230c      	movs	r3, #12
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001158:	2307      	movs	r3, #7
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <HAL_UART_MspInit+0xf0>)
 8001164:	f000 fa1a 	bl	800159c <HAL_GPIO_Init>
}
 8001168:	bf00      	nop
 800116a:	3730      	adds	r7, #48	; 0x30
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40011000 	.word	0x40011000
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000
 800117c:	40004400 	.word	0x40004400

08001180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	202d      	movs	r0, #45	; 0x2d
 8001196:	f000 f9d6 	bl	8001546 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800119a:	202d      	movs	r0, #45	; 0x2d
 800119c:	f000 f9ef 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_InitTick+0xa4>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_InitTick+0xa4>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6413      	str	r3, [r2, #64]	; 0x40
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_InitTick+0xa4>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011bc:	f107 0210 	add.w	r2, r7, #16
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 f83a 	bl	8002240 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011cc:	f000 fff4 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 80011d0:	4603      	mov	r3, r0
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d8:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_InitTick+0xa8>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	0c9b      	lsrs	r3, r3, #18
 80011e0:	3b01      	subs	r3, #1
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_InitTick+0xac>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_InitTick+0xb0>)
 80011e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_InitTick+0xac>)
 80011ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011f0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_InitTick+0xac>)
 80011f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_InitTick+0xac>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_InitTick+0xac>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <HAL_InitTick+0xac>)
 8001206:	f001 ff9f 	bl	8003148 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d104      	bne.n	800121a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <HAL_InitTick+0xac>)
 8001212:	f001 ffe9 	bl	80031e8 <HAL_TIM_Base_Start_IT>
 8001216:	4603      	mov	r3, r0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3730      	adds	r7, #48	; 0x30
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	431bde83 	.word	0x431bde83
 800122c:	20000230 	.word	0x20000230
 8001230:	40002000 	.word	0x40002000

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001286:	2001      	movs	r0, #1
 8001288:	f000 fb58 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001296:	f002 f815 	bl	80032c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000150 	.word	0x20000150

080012a4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80012aa:	f002 f80b 	bl	80032c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000230 	.word	0x20000230

080012b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80012c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ca:	e003      	b.n	80012d4 <LoopCopyDataInit>

080012cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012d2:	3104      	adds	r1, #4

080012d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012d4:	480b      	ldr	r0, [pc, #44]	; (8001304 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012dc:	d3f6      	bcc.n	80012cc <CopyDataInit>
  ldr  r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012e0:	e002      	b.n	80012e8 <LoopFillZerobss>

080012e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80012e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012e4:	f842 3b04 	str.w	r3, [r2], #4

080012e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012ec:	d3f9      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ee:	f7ff ffe3 	bl	80012b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f002 fe49 	bl	8003f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff f963 	bl	80005c0 <main>
  bx  lr    
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001300:	08004024 	.word	0x08004024
  ldr  r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001308:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800130c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001310:	2000027c 	.word	0x2000027c

08001314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_Init+0x40>)
 8001322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_Init+0x40>)
 800132e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x40>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f8f5 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff ff1a 	bl	8001180 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fdaa 	bl	8000ea4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023c00 	.word	0x40023c00

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	2000006c 	.word	0x2000006c
 800137c:	20000278 	.word	0x20000278

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000278 	.word	0x20000278

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff0 	bl	8001380 <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffe0 	bl	8001380 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000006c 	.word	0x2000006c

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4906      	ldr	r1, [pc, #24]	; (8001474 <__NVIC_EnableIRQ+0x34>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	; (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff4f 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff64 	bl	8001424 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ffb2 	bl	80014cc <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff81 	bl	8001478 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff57 	bl	8001440 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e16f      	b.n	800188c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8161 	beq.w	8001886 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d00b      	beq.n	80015e4 <HAL_GPIO_Init+0x48>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d007      	beq.n	80015e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d8:	2b11      	cmp	r3, #17
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b12      	cmp	r3, #18
 80015e2:	d130      	bne.n	8001646 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800161a:	2201      	movs	r2, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	f003 0201 	and.w	r2, r3, #1
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0xea>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b12      	cmp	r3, #18
 8001684:	d123      	bne.n	80016ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	6939      	ldr	r1, [r7, #16]
 80016ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0203 	and.w	r2, r3, #3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80bb 	beq.w	8001886 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <HAL_GPIO_Init+0x30c>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	4a63      	ldr	r2, [pc, #396]	; (80018a8 <HAL_GPIO_Init+0x30c>)
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	6453      	str	r3, [r2, #68]	; 0x44
 8001720:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <HAL_GPIO_Init+0x30c>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800172c:	4a5f      	ldr	r2, [pc, #380]	; (80018ac <HAL_GPIO_Init+0x310>)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_GPIO_Init+0x314>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d031      	beq.n	80017bc <HAL_GPIO_Init+0x220>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a56      	ldr	r2, [pc, #344]	; (80018b4 <HAL_GPIO_Init+0x318>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d02b      	beq.n	80017b8 <HAL_GPIO_Init+0x21c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <HAL_GPIO_Init+0x31c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d025      	beq.n	80017b4 <HAL_GPIO_Init+0x218>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a54      	ldr	r2, [pc, #336]	; (80018bc <HAL_GPIO_Init+0x320>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d01f      	beq.n	80017b0 <HAL_GPIO_Init+0x214>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a53      	ldr	r2, [pc, #332]	; (80018c0 <HAL_GPIO_Init+0x324>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d019      	beq.n	80017ac <HAL_GPIO_Init+0x210>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_GPIO_Init+0x328>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d013      	beq.n	80017a8 <HAL_GPIO_Init+0x20c>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_GPIO_Init+0x32c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00d      	beq.n	80017a4 <HAL_GPIO_Init+0x208>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_GPIO_Init+0x330>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d007      	beq.n	80017a0 <HAL_GPIO_Init+0x204>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <HAL_GPIO_Init+0x334>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_GPIO_Init+0x200>
 8001798:	2308      	movs	r3, #8
 800179a:	e010      	b.n	80017be <HAL_GPIO_Init+0x222>
 800179c:	2309      	movs	r3, #9
 800179e:	e00e      	b.n	80017be <HAL_GPIO_Init+0x222>
 80017a0:	2307      	movs	r3, #7
 80017a2:	e00c      	b.n	80017be <HAL_GPIO_Init+0x222>
 80017a4:	2306      	movs	r3, #6
 80017a6:	e00a      	b.n	80017be <HAL_GPIO_Init+0x222>
 80017a8:	2305      	movs	r3, #5
 80017aa:	e008      	b.n	80017be <HAL_GPIO_Init+0x222>
 80017ac:	2304      	movs	r3, #4
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x222>
 80017b0:	2303      	movs	r3, #3
 80017b2:	e004      	b.n	80017be <HAL_GPIO_Init+0x222>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x222>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_GPIO_Init+0x222>
 80017bc:	2300      	movs	r3, #0
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	f002 0203 	and.w	r2, r2, #3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d0:	4936      	ldr	r1, [pc, #216]	; (80018ac <HAL_GPIO_Init+0x310>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_GPIO_Init+0x338>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001802:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <HAL_GPIO_Init+0x338>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <HAL_GPIO_Init+0x338>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800182c:	4a29      	ldr	r2, [pc, #164]	; (80018d4 <HAL_GPIO_Init+0x338>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_GPIO_Init+0x338>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_GPIO_Init+0x338>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_GPIO_Init+0x338>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_GPIO_Init+0x338>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	f47f ae88 	bne.w	80015ac <HAL_GPIO_Init+0x10>
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40021400 	.word	0x40021400
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40021c00 	.word	0x40021c00
 80018d0:	40022000 	.word	0x40022000
 80018d4:	40013c00 	.word	0x40013c00

080018d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e8:	787b      	ldrb	r3, [r7, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018f4:	e003      	b.n	80018fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	619a      	str	r2, [r3, #24]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	041a      	lsls	r2, r3, #16
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43d9      	mvns	r1, r3
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	400b      	ands	r3, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
	...

0800193c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdae 	bl	80004bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40013c00 	.word	0x40013c00

0800196c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e237      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d050      	beq.n	8001a2c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198a:	4ba3      	ldr	r3, [pc, #652]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d00c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4ba0      	ldr	r3, [pc, #640]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d112      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b9d      	ldr	r3, [pc, #628]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ae:	d10b      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	4b99      	ldr	r3, [pc, #612]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d036      	beq.n	8001a2a <HAL_RCC_OscConfig+0xbe>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d132      	bne.n	8001a2a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e212      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4b93      	ldr	r3, [pc, #588]	; (8001c1c <HAL_RCC_OscConfig+0x2b0>)
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d013      	beq.n	8001a02 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fcd1 	bl	8001380 <HAL_GetTick>
 80019de:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e2:	f7ff fccd 	bl	8001380 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1fc      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f4:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x76>
 8001a00:	e014      	b.n	8001a2c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fcbd 	bl	8001380 <HAL_GetTick>
 8001a06:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fcb9 	bl	8001380 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b64      	cmp	r3, #100	; 0x64
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1e8      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1c:	4b7e      	ldr	r3, [pc, #504]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x9e>
 8001a28:	e000      	b.n	8001a2c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d077      	beq.n	8001b28 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a38:	4b77      	ldr	r3, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a44:	4b74      	ldr	r3, [pc, #464]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d126      	bne.n	8001a9e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a50:	4b71      	ldr	r3, [pc, #452]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d120      	bne.n	8001a9e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5c:	4b6e      	ldr	r3, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x108>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e1bc      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	21f8      	movs	r1, #248	; 0xf8
 8001a82:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	69b9      	ldr	r1, [r7, #24]
 8001a86:	fa91 f1a1 	rbit	r1, r1
 8001a8a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a8c:	6979      	ldr	r1, [r7, #20]
 8001a8e:	fab1 f181 	clz	r1, r1
 8001a92:	b2c9      	uxtb	r1, r1
 8001a94:	408b      	lsls	r3, r1
 8001a96:	4960      	ldr	r1, [pc, #384]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9c:	e044      	b.n	8001b28 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d02a      	beq.n	8001afc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa6:	4b5e      	ldr	r3, [pc, #376]	; (8001c20 <HAL_RCC_OscConfig+0x2b4>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fc68 	bl	8001380 <HAL_GetTick>
 8001ab0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fc64 	bl	8001380 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e193      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	21f8      	movs	r1, #248	; 0xf8
 8001ae0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	6939      	ldr	r1, [r7, #16]
 8001ae4:	fa91 f1a1 	rbit	r1, r1
 8001ae8:	60f9      	str	r1, [r7, #12]
  return result;
 8001aea:	68f9      	ldr	r1, [r7, #12]
 8001aec:	fab1 f181 	clz	r1, r1
 8001af0:	b2c9      	uxtb	r1, r1
 8001af2:	408b      	lsls	r3, r1
 8001af4:	4948      	ldr	r1, [pc, #288]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
 8001afa:	e015      	b.n	8001b28 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afc:	4b48      	ldr	r3, [pc, #288]	; (8001c20 <HAL_RCC_OscConfig+0x2b4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fc3d 	bl	8001380 <HAL_GetTick>
 8001b06:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fc39 	bl	8001380 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e168      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1c:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d030      	beq.n	8001b96 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d016      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fc1d 	bl	8001380 <HAL_GetTick>
 8001b46:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fc19 	bl	8001380 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e148      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5c:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1de>
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7ff fc06 	bl	8001380 <HAL_GetTick>
 8001b74:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff fc02 	bl	8001380 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e131      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8a:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8088 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d110      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_RCC_OscConfig+0x2bc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_RCC_OscConfig+0x2bc>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_RCC_OscConfig+0x2bc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d123      	bne.n	8001c38 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_RCC_OscConfig+0x2bc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <HAL_RCC_OscConfig+0x2bc>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fbc0 	bl	8001380 <HAL_GetTick>
 8001c00:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	e013      	b.n	8001c2c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c04:	f7ff fbbc 	bl	8001380 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d90c      	bls.n	8001c2c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0eb      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40023802 	.word	0x40023802
 8001c20:	42470000 	.word	0x42470000
 8001c24:	42470e80 	.word	0x42470e80
 8001c28:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <HAL_RCC_OscConfig+0x48c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0e5      	beq.n	8001c04 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <HAL_RCC_OscConfig+0x490>)
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d015      	beq.n	8001c76 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fb99 	bl	8001380 <HAL_GetTick>
 8001c4e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff fb95 	bl	8001380 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0c2      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ee      	beq.n	8001c52 <HAL_RCC_OscConfig+0x2e6>
 8001c74:	e014      	b.n	8001ca0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fb83 	bl	8001380 <HAL_GetTick>
 8001c7a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff fb7f 	bl	8001380 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0ac      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	4b5a      	ldr	r3, [pc, #360]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8097 	beq.w	8001dec <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d061      	beq.n	8001d8e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d146      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b4c      	ldr	r3, [pc, #304]	; (8001e04 <HAL_RCC_OscConfig+0x498>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fb52 	bl	8001380 <HAL_GetTick>
 8001cdc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff fb4e 	bl	8001380 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e07d      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <HAL_RCC_OscConfig+0x49c>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	69d1      	ldr	r1, [r2, #28]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6a12      	ldr	r2, [r2, #32]
 8001d0e:	4311      	orrs	r1, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d14:	0192      	lsls	r2, r2, #6
 8001d16:	4311      	orrs	r1, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d1c:	0612      	lsls	r2, r2, #24
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d24:	0852      	lsrs	r2, r2, #1
 8001d26:	3a01      	subs	r2, #1
 8001d28:	0412      	lsls	r2, r2, #16
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	4934      	ldr	r1, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_OscConfig+0x498>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fb22 	bl	8001380 <HAL_GetTick>
 8001d3c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fb1e 	bl	8001380 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e04d      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x3d4>
 8001d5e:	e045      	b.n	8001dec <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_RCC_OscConfig+0x498>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb0b 	bl	8001380 <HAL_GetTick>
 8001d6a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fb07 	bl	8001380 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e036      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x402>
 8001d8c:	e02e      	b.n	8001dec <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e029      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_OscConfig+0x494>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d11c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d115      	bne.n	8001de8 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d10d      	bne.n	8001de8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d106      	bne.n	8001de8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	40023870 	.word	0x40023870
 8001e00:	40023800 	.word	0x40023800
 8001e04:	42470060 	.word	0x42470060
 8001e08:	f0bc8000 	.word	0xf0bc8000

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0d2      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b6b      	ldr	r3, [pc, #428]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d90c      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0be      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e60:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a5b      	ldr	r2, [pc, #364]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001e78:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a55      	ldr	r2, [pc, #340]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4950      	ldr	r1, [pc, #320]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d040      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d115      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e085      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e079      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e071      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4939      	ldr	r1, [pc, #228]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7ff fa44 	bl	8001380 <HAL_GetTick>
 8001ef8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff fa40 	bl	8001380 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e059      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d20c      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e03c      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	491b      	ldr	r1, [pc, #108]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4913      	ldr	r1, [pc, #76]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001f8a:	f000 f82b 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001f8e:	4601      	mov	r1, r0
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f98:	22f0      	movs	r2, #240	; 0xf0
 8001f9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	fa92 f2a2 	rbit	r2, r2
 8001fa2:	60fa      	str	r2, [r7, #12]
  return result;
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	fab2 f282 	clz	r2, r2
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	40d3      	lsrs	r3, r2
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb0:	5cd3      	ldrb	r3, [r2, r3]
 8001fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1d0>)
 8001fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1d4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f8de 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023c00 	.word	0x40023c00
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	08003ffc 	.word	0x08003ffc
 8001fdc:	20000064 	.word	0x20000064
 8001fe0:	20000068 	.word	0x20000068

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ffc:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d00d      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x40>
 8002008:	2b08      	cmp	r3, #8
 800200a:	f200 80bd 	bhi.w	8002188 <HAL_RCC_GetSysClockFreq+0x1a4>
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x34>
 8002012:	2b04      	cmp	r3, #4
 8002014:	d003      	beq.n	800201e <HAL_RCC_GetSysClockFreq+0x3a>
 8002016:	e0b7      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002018:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800201a:	60bb      	str	r3, [r7, #8]
       break;
 800201c:	e0b7      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800201e:	4b60      	ldr	r3, [pc, #384]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002020:	60bb      	str	r3, [r7, #8]
      break;
 8002022:	e0b4      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002024:	4b5d      	ldr	r3, [pc, #372]	; (800219c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800202c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800202e:	4b5b      	ldr	r3, [pc, #364]	; (800219c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d04d      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203a:	4b58      	ldr	r3, [pc, #352]	; (800219c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	099b      	lsrs	r3, r3, #6
 8002040:	461a      	mov	r2, r3
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	f240 10ff 	movw	r0, #511	; 0x1ff
 800204a:	f04f 0100 	mov.w	r1, #0
 800204e:	ea02 0800 	and.w	r8, r2, r0
 8002052:	ea03 0901 	and.w	r9, r3, r1
 8002056:	4640      	mov	r0, r8
 8002058:	4649      	mov	r1, r9
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	014b      	lsls	r3, r1, #5
 8002064:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002068:	0142      	lsls	r2, r0, #5
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	ebb0 0008 	subs.w	r0, r0, r8
 8002072:	eb61 0109 	sbc.w	r1, r1, r9
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	018b      	lsls	r3, r1, #6
 8002080:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002084:	0182      	lsls	r2, r0, #6
 8002086:	1a12      	subs	r2, r2, r0
 8002088:	eb63 0301 	sbc.w	r3, r3, r1
 800208c:	f04f 0000 	mov.w	r0, #0
 8002090:	f04f 0100 	mov.w	r1, #0
 8002094:	00d9      	lsls	r1, r3, #3
 8002096:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800209a:	00d0      	lsls	r0, r2, #3
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	eb12 0208 	adds.w	r2, r2, r8
 80020a4:	eb43 0309 	adc.w	r3, r3, r9
 80020a8:	f04f 0000 	mov.w	r0, #0
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	0299      	lsls	r1, r3, #10
 80020b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020b6:	0290      	lsls	r0, r2, #10
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	461a      	mov	r2, r3
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	f7fe f87c 	bl	80001c4 <__aeabi_uldivmod>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4613      	mov	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e04a      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d6:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	099b      	lsrs	r3, r3, #6
 80020dc:	461a      	mov	r2, r3
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	ea02 0400 	and.w	r4, r2, r0
 80020ee:	ea03 0501 	and.w	r5, r3, r1
 80020f2:	4620      	mov	r0, r4
 80020f4:	4629      	mov	r1, r5
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	014b      	lsls	r3, r1, #5
 8002100:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002104:	0142      	lsls	r2, r0, #5
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	1b00      	subs	r0, r0, r4
 800210c:	eb61 0105 	sbc.w	r1, r1, r5
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	018b      	lsls	r3, r1, #6
 800211a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800211e:	0182      	lsls	r2, r0, #6
 8002120:	1a12      	subs	r2, r2, r0
 8002122:	eb63 0301 	sbc.w	r3, r3, r1
 8002126:	f04f 0000 	mov.w	r0, #0
 800212a:	f04f 0100 	mov.w	r1, #0
 800212e:	00d9      	lsls	r1, r3, #3
 8002130:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002134:	00d0      	lsls	r0, r2, #3
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	1912      	adds	r2, r2, r4
 800213c:	eb45 0303 	adc.w	r3, r5, r3
 8002140:	f04f 0000 	mov.w	r0, #0
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	0299      	lsls	r1, r3, #10
 800214a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800214e:	0290      	lsls	r0, r2, #10
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	f7fe f830 	bl	80001c4 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4613      	mov	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	3301      	adds	r3, #1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	60bb      	str	r3, [r7, #8]
      break;
 8002186:	e002      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800218a:	60bb      	str	r3, [r7, #8]
      break;
 800218c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218e:	68bb      	ldr	r3, [r7, #8]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	00f42400 	.word	0x00f42400

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000064 	.word	0x20000064

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80021be:	f7ff fff1 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c2:	4601      	mov	r1, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80021cc:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80021d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	fa92 f2a2 	rbit	r2, r2
 80021d8:	603a      	str	r2, [r7, #0]
  return result;
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	fab2 f282 	clz	r2, r2
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	40d3      	lsrs	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	0800400c 	.word	0x0800400c

080021fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002202:	f7ff ffcf 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 8002206:	4601      	mov	r1, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002210:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	fa92 f2a2 	rbit	r2, r2
 800221c:	603a      	str	r2, [r7, #0]
  return result;
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	40d3      	lsrs	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_RCC_GetPCLK2Freq+0x40>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	0800400c 	.word	0x0800400c

08002240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	220f      	movs	r2, #15
 800224e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_GetClockConfig+0x58>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <HAL_RCC_GetClockConfig+0x58>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_GetClockConfig+0x58>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_RCC_GetClockConfig+0x58>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	08db      	lsrs	r3, r3, #3
 800227a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_GetClockConfig+0x5c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 020f 	and.w	r2, r3, #15
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	601a      	str	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	40023800 	.word	0x40023800
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d14c      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022c4:	4b6d      	ldr	r3, [pc, #436]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022ca:	f7ff f859 	bl	8001380 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80022d2:	f7ff f855 	bl	8001380 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0c7      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022e4:	4b66      	ldr	r3, [pc, #408]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80022f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	fa92 f2a2 	rbit	r2, r2
 8002300:	613a      	str	r2, [r7, #16]
  return result;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	fa03 f202 	lsl.w	r2, r3, r2
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8002316:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	69f9      	ldr	r1, [r7, #28]
 800231a:	fa91 f1a1 	rbit	r1, r1
 800231e:	61b9      	str	r1, [r7, #24]
  return result;
 8002320:	69b9      	ldr	r1, [r7, #24]
 8002322:	fab1 f181 	clz	r1, r1
 8002326:	b2c9      	uxtb	r1, r1
 8002328:	408b      	lsls	r3, r1
 800232a:	4955      	ldr	r1, [pc, #340]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002332:	4b52      	ldr	r3, [pc, #328]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff f822 	bl	8001380 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002340:	f7ff f81e 	bl	8001380 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e090      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002352:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8083 	beq.w	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4a42      	ldr	r2, [pc, #264]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6413      	str	r3, [r2, #64]	; 0x40
 800237c:	4b40      	ldr	r3, [pc, #256]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3d      	ldr	r2, [pc, #244]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002394:	f7fe fff4 	bl	8001380 <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800239c:	f7fe fff0 	bl	8001380 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e062      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ba:	4b31      	ldr	r3, [pc, #196]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d02f      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d2:	6a3a      	ldr	r2, [r7, #32]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d028      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023ee:	4a24      	ldr	r2, [pc, #144]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d114      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe ffbe 	bl	8001380 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe ffba 	bl	8001380 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e02a      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0ee      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002436:	d10d      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
 8002452:	e005      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800245a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800245e:	6093      	str	r3, [r2, #8]
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246c:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3728      	adds	r7, #40	; 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	42470068 	.word	0x42470068
 8002480:	40023800 	.word	0x40023800
 8002484:	40007000 	.word	0x40007000
 8002488:	42470e40 	.word	0x42470e40

0800248c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07c      	b.n	8002598 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7f5b      	ldrb	r3, [r3, #29]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fd1e 	bl	8000ef0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	22ca      	movs	r2, #202	; 0xca
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2253      	movs	r2, #83	; 0x53
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f9e6 	bl	800289c <RTC_EnterInitMode>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	22ff      	movs	r2, #255	; 0xff
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2204      	movs	r2, #4
 80024e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e057      	b.n	8002598 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80024f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68d2      	ldr	r2, [r2, #12]
 8002522:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6919      	ldr	r1, [r3, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	041a      	lsls	r2, r3, #16
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002546:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f97f 	bl	800284c <HAL_RTC_WaitForSynchro>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2204      	movs	r2, #4
 8002560:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e018      	b.n	8002598 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	22ff      	movs	r2, #255	; 0xff
 800258e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	7f1b      	ldrb	r3, [r3, #28]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_RTC_SetTime+0x1c>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0a3      	b.n	8002704 <HAL_RTC_SetTime+0x164>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2202      	movs	r2, #2
 80025c6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d126      	bne.n	800261c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f984 	bl	80028f4 <RTC_ByteToBcd2>
 80025ec:	4603      	mov	r3, r0
 80025ee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f97d 	bl	80028f4 <RTC_ByteToBcd2>
 80025fa:	4603      	mov	r3, r0
 80025fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80025fe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	789b      	ldrb	r3, [r3, #2]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 f975 	bl	80028f4 <RTC_ByteToBcd2>
 800260a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800260c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	78db      	ldrb	r3, [r3, #3]
 8002614:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e018      	b.n	800264e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800263c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002642:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	78db      	ldrb	r3, [r3, #3]
 8002648:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	22ca      	movs	r2, #202	; 0xca
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2253      	movs	r2, #83	; 0x53
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f91c 	bl	800289c <RTC_EnterInitMode>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	22ff      	movs	r2, #255	; 0xff
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2204      	movs	r2, #4
 8002676:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e040      	b.n	8002704 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800268c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002690:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c8:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f8be 	bl	800284c <HAL_RTC_WaitForSynchro>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	22ff      	movs	r2, #255	; 0xff
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2204      	movs	r2, #4
 80026e2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00a      	b.n	8002704 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	22ff      	movs	r2, #255	; 0xff
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002702:	2300      	movs	r3, #0
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	bd90      	pop	{r4, r7, pc}

0800270c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	7f1b      	ldrb	r3, [r3, #28]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_RTC_SetDate+0x1c>
 8002724:	2302      	movs	r3, #2
 8002726:	e08d      	b.n	8002844 <HAL_RTC_SetDate+0x138>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2202      	movs	r2, #2
 8002732:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10e      	bne.n	8002758 <HAL_RTC_SetDate+0x4c>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	f023 0310 	bic.w	r3, r3, #16
 800274e:	b2db      	uxtb	r3, r3
 8002750:	330a      	adds	r3, #10
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d11c      	bne.n	8002798 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	78db      	ldrb	r3, [r3, #3]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f8c6 	bl	80028f4 <RTC_ByteToBcd2>
 8002768:	4603      	mov	r3, r0
 800276a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	785b      	ldrb	r3, [r3, #1]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f8bf 	bl	80028f4 <RTC_ByteToBcd2>
 8002776:	4603      	mov	r3, r0
 8002778:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800277a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	789b      	ldrb	r3, [r3, #2]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f8b7 	bl	80028f4 <RTC_ByteToBcd2>
 8002786:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002788:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e00e      	b.n	80027b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	78db      	ldrb	r3, [r3, #3]
 800279c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027a4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80027aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	22ca      	movs	r2, #202	; 0xca
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2253      	movs	r2, #83	; 0x53
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f868 	bl	800289c <RTC_EnterInitMode>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	22ff      	movs	r2, #255	; 0xff
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2204      	movs	r2, #4
 80027de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e02c      	b.n	8002844 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80027f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f81e 	bl	800284c <HAL_RTC_WaitForSynchro>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	22ff      	movs	r2, #255	; 0xff
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2204      	movs	r2, #4
 8002822:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00a      	b.n	8002844 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002842:	2300      	movs	r3, #0
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}

0800284c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002866:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002868:	f7fe fd8a 	bl	8001380 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800286e:	e009      	b.n	8002884 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002870:	f7fe fd86 	bl	8001380 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800287e:	d901      	bls.n	8002884 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e007      	b.n	8002894 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0ee      	beq.n	8002870 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d119      	bne.n	80028ea <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f04f 32ff 	mov.w	r2, #4294967295
 80028be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fe fd5e 	bl	8001380 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80028c6:	e009      	b.n	80028dc <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028c8:	f7fe fd5a 	bl	8001380 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d6:	d901      	bls.n	80028dc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e007      	b.n	80028ec <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0ee      	beq.n	80028c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 8002902:	e005      	b.n	8002910 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3301      	adds	r3, #1
 8002908:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	3b0a      	subs	r3, #10
 800290e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	2b09      	cmp	r3, #9
 8002914:	d8f6      	bhi.n	8002904 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	b2da      	uxtb	r2, r3
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	4313      	orrs	r3, r2
 8002922:	b2db      	uxtb	r3, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e07b      	b.n	8002a38 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2b00      	cmp	r3, #0
 8002946:	d108      	bne.n	800295a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002950:	d009      	beq.n	8002966 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	61da      	str	r2, [r3, #28]
 8002958:	e005      	b.n	8002966 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d106      	bne.n	8002986 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7fe facb 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	ea42 0103 	orr.w	r1, r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	0c1b      	lsrs	r3, r3, #16
 8002a04:	f003 0104 	and.w	r1, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f003 0210 	and.w	r2, r3, #16
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_SPI_Transmit+0x22>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e126      	b.n	8002cb0 <HAL_SPI_Transmit+0x270>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a6a:	f7fe fc89 	bl	8001380 <HAL_GetTick>
 8002a6e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d002      	beq.n	8002a86 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
 8002a82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a84:	e10b      	b.n	8002c9e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_SPI_Transmit+0x52>
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a96:	e102      	b.n	8002c9e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	88fa      	ldrh	r2, [r7, #6]
 8002ab6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ade:	d10f      	bne.n	8002b00 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002afe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d007      	beq.n	8002b1e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b26:	d14b      	bne.n	8002bc0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_SPI_Transmit+0xf6>
 8002b30:	8afb      	ldrh	r3, [r7, #22]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d13e      	bne.n	8002bb4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	881a      	ldrh	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	1c9a      	adds	r2, r3, #2
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b5a:	e02b      	b.n	8002bb4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d112      	bne.n	8002b90 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	881a      	ldrh	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	1c9a      	adds	r2, r3, #2
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b8e:	e011      	b.n	8002bb4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b90:	f7fe fbf6 	bl	8001380 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d803      	bhi.n	8002ba8 <HAL_SPI_Transmit+0x168>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba6:	d102      	bne.n	8002bae <HAL_SPI_Transmit+0x16e>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bb2:	e074      	b.n	8002c9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ce      	bne.n	8002b5c <HAL_SPI_Transmit+0x11c>
 8002bbe:	e04c      	b.n	8002c5a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_SPI_Transmit+0x18e>
 8002bc8:	8afb      	ldrh	r3, [r7, #22]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d140      	bne.n	8002c50 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bf4:	e02c      	b.n	8002c50 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d113      	bne.n	8002c2c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	7812      	ldrb	r2, [r2, #0]
 8002c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c2a:	e011      	b.n	8002c50 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c2c:	f7fe fba8 	bl	8001380 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d803      	bhi.n	8002c44 <HAL_SPI_Transmit+0x204>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c42:	d102      	bne.n	8002c4a <HAL_SPI_Transmit+0x20a>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d102      	bne.n	8002c50 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c4e:	e026      	b.n	8002c9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1cd      	bne.n	8002bf6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	6839      	ldr	r1, [r7, #0]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fa54 	bl	800310c <SPI_EndRxTxTransaction>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	77fb      	strb	r3, [r7, #31]
 8002c9a:	e000      	b.n	8002c9e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cae:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_SPI_TransmitReceive+0x26>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e18a      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x33c>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ce6:	f7fe fb4b 	bl	8001380 <HAL_GetTick>
 8002cea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d00f      	beq.n	8002d28 <HAL_SPI_TransmitReceive+0x70>
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d0e:	d107      	bne.n	8002d20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <HAL_SPI_TransmitReceive+0x68>
 8002d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d003      	beq.n	8002d28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
 8002d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d26:	e15b      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_SPI_TransmitReceive+0x82>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_SPI_TransmitReceive+0x82>
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d40:	e14e      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d003      	beq.n	8002d56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2205      	movs	r2, #5
 8002d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	887a      	ldrh	r2, [r7, #2]
 8002d66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	887a      	ldrh	r2, [r7, #2]
 8002d7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d007      	beq.n	8002daa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db2:	d178      	bne.n	8002ea6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x10a>
 8002dbc:	8b7b      	ldrh	r3, [r7, #26]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d166      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	1c9a      	adds	r2, r3, #2
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de6:	e053      	b.n	8002e90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d11b      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x176>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d016      	beq.n	8002e2e <HAL_SPI_TransmitReceive+0x176>
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d113      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	881a      	ldrh	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	1c9a      	adds	r2, r3, #2
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d119      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x1b8>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d014      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	b292      	uxth	r2, r2
 8002e52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	1c9a      	adds	r2, r3, #2
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e70:	f7fe fa86 	bl	8001380 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d807      	bhi.n	8002e90 <HAL_SPI_TransmitReceive+0x1d8>
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d003      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e8e:	e0a7      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1a6      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x130>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1a1      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x130>
 8002ea4:	e07c      	b.n	8002fa0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x1fc>
 8002eae:	8b7b      	ldrh	r3, [r7, #26]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d16b      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	7812      	ldrb	r2, [r2, #0]
 8002ec0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eda:	e057      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d11c      	bne.n	8002f24 <HAL_SPI_TransmitReceive+0x26c>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d017      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x26c>
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d114      	bne.n	8002f24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d119      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x2ae>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d014      	beq.n	8002f66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f62:	2301      	movs	r3, #1
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f66:	f7fe fa0b 	bl	8001380 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d803      	bhi.n	8002f7e <HAL_SPI_TransmitReceive+0x2c6>
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d102      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x2cc>
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f8a:	e029      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1a2      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x224>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d19d      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f8b1 	bl	800310c <SPI_EndRxTxTransaction>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fbc:	e010      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10b      	bne.n	8002fde <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	e000      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002fde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3730      	adds	r7, #48	; 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800300c:	f7fe f9b8 	bl	8001380 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	4413      	add	r3, r2
 800301a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800301c:	f7fe f9b0 	bl	8001380 <HAL_GetTick>
 8003020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003022:	4b39      	ldr	r3, [pc, #228]	; (8003108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	015b      	lsls	r3, r3, #5
 8003028:	0d1b      	lsrs	r3, r3, #20
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	fb02 f303 	mul.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003032:	e054      	b.n	80030de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d050      	beq.n	80030de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800303c:	f7fe f9a0 	bl	8001380 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	429a      	cmp	r2, r3
 800304a:	d902      	bls.n	8003052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d13d      	bne.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800306a:	d111      	bne.n	8003090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003074:	d004      	beq.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307e:	d107      	bne.n	8003090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800308e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003098:	d10f      	bne.n	80030ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e017      	b.n	80030fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3b01      	subs	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d19b      	bne.n	8003034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000064 	.word	0x20000064

0800310c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2200      	movs	r2, #0
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff ff6a 	bl	8002ffc <SPI_WaitFlagStateUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e000      	b.n	8003140 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e041      	b.n	80031de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd ff62 	bl	8001038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f000 fa8c 	bl	80036a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e04e      	b.n	800329e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <HAL_TIM_Base_Start_IT+0xc0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322a:	d01d      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_TIM_Base_Start_IT+0xc4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d018      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00e      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_TIM_Base_Start_IT+0xd4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d111      	bne.n	800328c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b06      	cmp	r3, #6
 8003278:	d010      	beq.n	800329c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	e007      	b.n	800329c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	40010400 	.word	0x40010400
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40001800 	.word	0x40001800

080032c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d122      	bne.n	8003320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d11b      	bne.n	8003320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0202 	mvn.w	r2, #2
 80032f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f9b1 	bl	800366e <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f9a4 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f9b3 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d122      	bne.n	8003374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d11b      	bne.n	8003374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0204 	mvn.w	r2, #4
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f987 	bl	800366e <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f97a 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f989 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b08      	cmp	r3, #8
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b08      	cmp	r3, #8
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0208 	mvn.w	r2, #8
 8003398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2204      	movs	r2, #4
 800339e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f95d 	bl	800366e <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f950 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f95f 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0210 	mvn.w	r2, #16
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2208      	movs	r2, #8
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f933 	bl	800366e <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f926 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f935 	bl	8003680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d10e      	bne.n	8003448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d107      	bne.n	8003448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0201 	mvn.w	r2, #1
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fcf4 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d10e      	bne.n	8003474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d107      	bne.n	8003474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 facf 	bl	8003a12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d10e      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d107      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8f9 	bl	8003692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d107      	bne.n	80034cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0220 	mvn.w	r2, #32
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa9a 	bl	8003a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_TIM_ConfigClockSource+0x18>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e0b3      	b.n	8003654 <HAL_TIM_ConfigClockSource+0x180>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800350a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003512:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003524:	d03e      	beq.n	80035a4 <HAL_TIM_ConfigClockSource+0xd0>
 8003526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352a:	f200 8087 	bhi.w	800363c <HAL_TIM_ConfigClockSource+0x168>
 800352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003532:	f000 8085 	beq.w	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353a:	d87f      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x168>
 800353c:	2b70      	cmp	r3, #112	; 0x70
 800353e:	d01a      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0xa2>
 8003540:	2b70      	cmp	r3, #112	; 0x70
 8003542:	d87b      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x168>
 8003544:	2b60      	cmp	r3, #96	; 0x60
 8003546:	d050      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x116>
 8003548:	2b60      	cmp	r3, #96	; 0x60
 800354a:	d877      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x168>
 800354c:	2b50      	cmp	r3, #80	; 0x50
 800354e:	d03c      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0xf6>
 8003550:	2b50      	cmp	r3, #80	; 0x50
 8003552:	d873      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x168>
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d058      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x136>
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d86f      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x168>
 800355c:	2b30      	cmp	r3, #48	; 0x30
 800355e:	d064      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x156>
 8003560:	2b30      	cmp	r3, #48	; 0x30
 8003562:	d86b      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x168>
 8003564:	2b20      	cmp	r3, #32
 8003566:	d060      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x156>
 8003568:	2b20      	cmp	r3, #32
 800356a:	d867      	bhi.n	800363c <HAL_TIM_ConfigClockSource+0x168>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d05c      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x156>
 8003570:	2b10      	cmp	r3, #16
 8003572:	d05a      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003574:	e062      	b.n	800363c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f000 f9a2 	bl	80038ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003598:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	609a      	str	r2, [r3, #8]
      break;
 80035a2:	e04e      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6899      	ldr	r1, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f000 f98b 	bl	80038ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035c6:	609a      	str	r2, [r3, #8]
      break;
 80035c8:	e03b      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f000 f902 	bl	80037e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2150      	movs	r1, #80	; 0x50
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f959 	bl	800389a <TIM_ITRx_SetConfig>
      break;
 80035e8:	e02b      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 f920 	bl	800383c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2160      	movs	r1, #96	; 0x60
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f949 	bl	800389a <TIM_ITRx_SetConfig>
      break;
 8003608:	e01b      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	461a      	mov	r2, r3
 8003618:	f000 f8e2 	bl	80037e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2140      	movs	r1, #64	; 0x40
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f939 	bl	800389a <TIM_ITRx_SetConfig>
      break;
 8003628:	e00b      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f000 f930 	bl	800389a <TIM_ITRx_SetConfig>
        break;
 800363a:	e002      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800363c:	bf00      	nop
 800363e:	e000      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003640:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a3f      	ldr	r2, [pc, #252]	; (80037b4 <TIM_Base_SetConfig+0x110>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c2:	d00f      	beq.n	80036e4 <TIM_Base_SetConfig+0x40>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <TIM_Base_SetConfig+0x114>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00b      	beq.n	80036e4 <TIM_Base_SetConfig+0x40>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <TIM_Base_SetConfig+0x118>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d007      	beq.n	80036e4 <TIM_Base_SetConfig+0x40>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a3a      	ldr	r2, [pc, #232]	; (80037c0 <TIM_Base_SetConfig+0x11c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0x40>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a39      	ldr	r2, [pc, #228]	; (80037c4 <TIM_Base_SetConfig+0x120>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d108      	bne.n	80036f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2e      	ldr	r2, [pc, #184]	; (80037b4 <TIM_Base_SetConfig+0x110>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02b      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003704:	d027      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <TIM_Base_SetConfig+0x114>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d023      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <TIM_Base_SetConfig+0x118>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01f      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <TIM_Base_SetConfig+0x11c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d01b      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <TIM_Base_SetConfig+0x120>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d017      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a27      	ldr	r2, [pc, #156]	; (80037c8 <TIM_Base_SetConfig+0x124>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a26      	ldr	r2, [pc, #152]	; (80037cc <TIM_Base_SetConfig+0x128>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00f      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <TIM_Base_SetConfig+0x12c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <TIM_Base_SetConfig+0x130>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <TIM_Base_SetConfig+0x134>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a22      	ldr	r2, [pc, #136]	; (80037dc <TIM_Base_SetConfig+0x138>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <TIM_Base_SetConfig+0x110>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d003      	beq.n	800379c <TIM_Base_SetConfig+0xf8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <TIM_Base_SetConfig+0x120>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d103      	bne.n	80037a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	615a      	str	r2, [r3, #20]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800
 80037c0:	40000c00 	.word	0x40000c00
 80037c4:	40010400 	.word	0x40010400
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40014400 	.word	0x40014400
 80037d0:	40014800 	.word	0x40014800
 80037d4:	40001800 	.word	0x40001800
 80037d8:	40001c00 	.word	0x40001c00
 80037dc:	40002000 	.word	0x40002000

080037e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f023 0201 	bic.w	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800380a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f023 030a 	bic.w	r3, r3, #10
 800381c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	621a      	str	r2, [r3, #32]
}
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 0210 	bic.w	r2, r3, #16
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003866:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	031b      	lsls	r3, r3, #12
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003878:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f043 0307 	orr.w	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	609a      	str	r2, [r3, #8]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b087      	sub	sp, #28
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	021a      	lsls	r2, r3, #8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	609a      	str	r2, [r3, #8]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003920:	2302      	movs	r3, #2
 8003922:	e05a      	b.n	80039da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d022      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d01d      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d018      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00e      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d009      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a14      	ldr	r2, [pc, #80]	; (80039fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d10c      	bne.n	80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	40000c00 	.word	0x40000c00
 80039f4:	40010400 	.word	0x40010400
 80039f8:	40014000 	.word	0x40014000
 80039fc:	40001800 	.word	0x40001800

08003a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e03f      	b.n	8003ab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd fb1c 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f9a3 	bl	8003db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08a      	sub	sp, #40	; 0x28
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d17c      	bne.n	8003bd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_Transmit+0x2c>
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e075      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_UART_Transmit+0x3e>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e06e      	b.n	8003bda <HAL_UART_Transmit+0x11c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b12:	f7fd fc35 	bl	8001380 <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d108      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e003      	b.n	8003b48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003b50:	e02a      	b.n	8003ba8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f8df 	bl	8003d20 <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e036      	b.n	8003bda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e007      	b.n	8003b9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cf      	bne.n	8003b52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f8af 	bl	8003d20 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e006      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b08a      	sub	sp, #40	; 0x28
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	f040 8089 	bne.w	8003d16 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_UART_Receive+0x2e>
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e081      	b.n	8003d18 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Receive+0x40>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e07a      	b.n	8003d18 <HAL_UART_Receive+0x136>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2222      	movs	r2, #34	; 0x22
 8003c34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c38:	f7fd fba2 	bl	8001380 <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c52:	d108      	bne.n	8003c66 <HAL_UART_Receive+0x84>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e003      	b.n	8003c6e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c76:	e043      	b.n	8003d00 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2120      	movs	r1, #32
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f84c 	bl	8003d20 <UART_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e042      	b.n	8003d18 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10c      	bne.n	8003cb2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3302      	adds	r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e01f      	b.n	8003cf2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cba:	d007      	beq.n	8003ccc <HAL_UART_Receive+0xea>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <HAL_UART_Receive+0xf8>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	e008      	b.n	8003cec <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1b6      	bne.n	8003c78 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d30:	e02c      	b.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d028      	beq.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d40:	f7fd fb1e 	bl	8001380 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d21d      	bcs.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e00f      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d0c3      	beq.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003df4:	f023 030c 	bic.w	r3, r3, #12
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a57      	ldr	r2, [pc, #348]	; (8003f7c <UART_SetConfig+0x1c8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <UART_SetConfig+0x78>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a56      	ldr	r2, [pc, #344]	; (8003f80 <UART_SetConfig+0x1cc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d103      	bne.n	8003e34 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7fe f9e6 	bl	80021fc <HAL_RCC_GetPCLK2Freq>
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	e002      	b.n	8003e3a <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7fe f9c0 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 8003e38:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e42:	d14c      	bne.n	8003ede <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009a      	lsls	r2, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	4a4a      	ldr	r2, [pc, #296]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	0119      	lsls	r1, r3, #4
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009a      	lsls	r2, r3, #2
 8003e6e:	441a      	add	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003e7c:	fba3 0302 	umull	r0, r3, r3, r2
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	2064      	movs	r0, #100	; 0x64
 8003e84:	fb00 f303 	mul.w	r3, r0, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	3332      	adds	r3, #50	; 0x32
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e9c:	4419      	add	r1, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009a      	lsls	r2, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb4:	4b33      	ldr	r3, [pc, #204]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2064      	movs	r0, #100	; 0x64
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	3332      	adds	r3, #50	; 0x32
 8003ec8:	4a2e      	ldr	r2, [pc, #184]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	f003 0207 	and.w	r2, r3, #7
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	440a      	add	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003edc:	e04a      	b.n	8003f74 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef4:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	0119      	lsls	r1, r3, #4
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009a      	lsls	r2, r3, #2
 8003f08:	441a      	add	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003f16:	fba3 0302 	umull	r0, r3, r3, r2
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2064      	movs	r0, #100	; 0x64
 8003f1e:	fb00 f303 	mul.w	r3, r0, r3
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	3332      	adds	r3, #50	; 0x32
 8003f28:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f34:	4419      	add	r1, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009a      	lsls	r2, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003f4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	2064      	movs	r0, #100	; 0x64
 8003f56:	fb00 f303 	mul.w	r3, r0, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	3332      	adds	r3, #50	; 0x32
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <UART_SetConfig+0x1d0>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	440a      	add	r2, r1
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40011000 	.word	0x40011000
 8003f80:	40011400 	.word	0x40011400
 8003f84:	51eb851f 	.word	0x51eb851f

08003f88 <__libc_init_array>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	2600      	movs	r6, #0
 8003f8c:	4d0c      	ldr	r5, [pc, #48]	; (8003fc0 <__libc_init_array+0x38>)
 8003f8e:	4c0d      	ldr	r4, [pc, #52]	; (8003fc4 <__libc_init_array+0x3c>)
 8003f90:	1b64      	subs	r4, r4, r5
 8003f92:	10a4      	asrs	r4, r4, #2
 8003f94:	42a6      	cmp	r6, r4
 8003f96:	d109      	bne.n	8003fac <__libc_init_array+0x24>
 8003f98:	f000 f822 	bl	8003fe0 <_init>
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	4d0a      	ldr	r5, [pc, #40]	; (8003fc8 <__libc_init_array+0x40>)
 8003fa0:	4c0a      	ldr	r4, [pc, #40]	; (8003fcc <__libc_init_array+0x44>)
 8003fa2:	1b64      	subs	r4, r4, r5
 8003fa4:	10a4      	asrs	r4, r4, #2
 8003fa6:	42a6      	cmp	r6, r4
 8003fa8:	d105      	bne.n	8003fb6 <__libc_init_array+0x2e>
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb0:	4798      	blx	r3
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7ee      	b.n	8003f94 <__libc_init_array+0xc>
 8003fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fba:	4798      	blx	r3
 8003fbc:	3601      	adds	r6, #1
 8003fbe:	e7f2      	b.n	8003fa6 <__libc_init_array+0x1e>
 8003fc0:	0800401c 	.word	0x0800401c
 8003fc4:	0800401c 	.word	0x0800401c
 8003fc8:	0800401c 	.word	0x0800401c
 8003fcc:	08004020 	.word	0x08004020

08003fd0 <memset>:
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4402      	add	r2, r0
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d100      	bne.n	8003fda <memset+0xa>
 8003fd8:	4770      	bx	lr
 8003fda:	f803 1b01 	strb.w	r1, [r3], #1
 8003fde:	e7f9      	b.n	8003fd4 <memset+0x4>

08003fe0 <_init>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

08003fec <_fini>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr
