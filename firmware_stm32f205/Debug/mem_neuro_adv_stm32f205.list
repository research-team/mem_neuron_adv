
mem_neuro_adv_stm32f205.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e4  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003484  08003484  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800348c  0800348c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  080034a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080034a0  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd49  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e6c  00000000  00000000  0002dd7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  0002fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d58  00000000  00000000  00030a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e0e2  00000000  00000000  00031798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3ae  00000000  00000000  0004f87a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9735  00000000  00000000  0005ac28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011435d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c5c  00000000  00000000  001143d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003450 	.word	0x08003450

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08003450 	.word	0x08003450

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fcc5 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8a3 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fa19 	bl	800090c <MX_GPIO_Init>
  MX_RTC_Init();
 80004da:	f000 f8ff 	bl	80006dc <MX_RTC_Init>
  MX_SPI1_Init();
 80004de:	f000 f955 	bl	800078c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 f9bf 	bl	8000864 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f9e7 	bl	80008b8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80004ea:	f000 f985 	bl	80007f8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80004ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f2:	f000 fcf1 	bl	8000ed8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t data1[3]={0xB0,0x02,0x0F};
 80004f6:	4a44      	ldr	r2, [pc, #272]	; (8000608 <main+0x140>)
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	4611      	mov	r1, r2
 8000500:	8019      	strh	r1, [r3, #0]
 8000502:	3302      	adds	r3, #2
 8000504:	0c12      	lsrs	r2, r2, #16
 8000506:	701a      	strb	r2, [r3, #0]
  uint8_t data2[3];
  HAL_GPIO_WritePin(CSPOW_GPIO_Port, CSPOW_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2102      	movs	r1, #2
 800050c:	483f      	ldr	r0, [pc, #252]	; (800060c <main+0x144>)
 800050e:	f000 ff83 	bl	8001418 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, data1,data2, 3, 1000);
 8000512:	f107 0208 	add.w	r2, r7, #8
 8000516:	f107 010c 	add.w	r1, r7, #12
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2303      	movs	r3, #3
 8000522:	483b      	ldr	r0, [pc, #236]	; (8000610 <main+0x148>)
 8000524:	f002 f946 	bl	80027b4 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CSPOW_GPIO_Port, CSPOW_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2102      	movs	r1, #2
 800052c:	4837      	ldr	r0, [pc, #220]	; (800060c <main+0x144>)
 800052e:	f000 ff73 	bl	8001418 <HAL_GPIO_WritePin>

  uint8_t data[1]={0xFE};
 8000532:	23fe      	movs	r3, #254	; 0xfe
 8000534:	713b      	strb	r3, [r7, #4]
  HAL_GPIO_WritePin(CS_CS_GPIO_Port, CS_CS_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2110      	movs	r1, #16
 800053a:	4834      	ldr	r0, [pc, #208]	; (800060c <main+0x144>)
 800053c:	f000 ff6c 	bl	8001418 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, data, 1, 1000);
 8000540:	1d39      	adds	r1, r7, #4
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	2201      	movs	r2, #1
 8000548:	4832      	ldr	r0, [pc, #200]	; (8000614 <main+0x14c>)
 800054a:	f001 fff7 	bl	800253c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_CS_GPIO_Port, CS_CS_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	482e      	ldr	r0, [pc, #184]	; (800060c <main+0x144>)
 8000554:	f000 ff60 	bl	8001418 <HAL_GPIO_WritePin>

  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000558:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <main+0x148>)
 800055a:	2201      	movs	r2, #1
 800055c:	615a      	str	r2, [r3, #20]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800055e:	482c      	ldr	r0, [pc, #176]	; (8000610 <main+0x148>)
 8000560:	f001 ff63 	bl	800242a <HAL_SPI_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <main+0xa6>
  {
	  Error_Handler();
 800056a:	f000 fa81 	bl	8000a70 <Error_Handler>
  }

  //00 0001 11 1111 1111
  //0000 0111 1111 1111
  data1[0]=0x05;
 800056e:	2305      	movs	r3, #5
 8000570:	733b      	strb	r3, [r7, #12]
  data1[1]=0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	737b      	strb	r3, [r7, #13]
  HAL_SPI_TransmitReceive(&hspi1, data1,data2, 2, 1000);
 8000576:	f107 0208 	add.w	r2, r7, #8
 800057a:	f107 010c 	add.w	r1, r7, #12
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2302      	movs	r3, #2
 8000586:	4822      	ldr	r0, [pc, #136]	; (8000610 <main+0x148>)
 8000588:	f002 f914 	bl	80027b4 <HAL_SPI_TransmitReceive>

  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <main+0x148>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000592:	481f      	ldr	r0, [pc, #124]	; (8000610 <main+0x148>)
 8000594:	f001 ff49 	bl	800242a <HAL_SPI_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <main+0xda>
  {
	  Error_Handler();
 800059e:	f000 fa67 	bl	8000a70 <Error_Handler>
  }

  data[0]=0xFF;
 80005a2:	23ff      	movs	r3, #255	; 0xff
 80005a4:	713b      	strb	r3, [r7, #4]
  HAL_GPIO_WritePin(CS_CS_GPIO_Port, CS_CS_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	4818      	ldr	r0, [pc, #96]	; (800060c <main+0x144>)
 80005ac:	f000 ff34 	bl	8001418 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, data, 1, 1000);
 80005b0:	1d39      	adds	r1, r7, #4
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	2201      	movs	r2, #1
 80005b8:	4816      	ldr	r0, [pc, #88]	; (8000614 <main+0x14c>)
 80005ba:	f001 ffbf 	bl	800253c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_CS_GPIO_Port, CS_CS_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2110      	movs	r1, #16
 80005c2:	4812      	ldr	r0, [pc, #72]	; (800060c <main+0x144>)
 80005c4:	f000 ff28 	bl	8001418 <HAL_GPIO_WritePin>
//  data1[0]=0x00;
//  HAL_GPIO_WritePin(CSPOW_GPIO_Port, CSPOW_Pin, GPIO_PIN_RESET);
//  HAL_SPI_TransmitReceive(&hspi1, data1,data2, 3, 1000);
//  HAL_GPIO_WritePin(CSPOW_GPIO_Port, CSPOW_Pin, GPIO_PIN_SET);

  HAL_GPIO_WritePin(Q1_GPIO_Port, Q1_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ce:	480f      	ldr	r0, [pc, #60]	; (800060c <main+0x144>)
 80005d0:	f000 ff22 	bl	8001418 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Q2_GPIO_Port, Q2_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005da:	480c      	ldr	r0, [pc, #48]	; (800060c <main+0x144>)
 80005dc:	f000 ff1c 	bl	8001418 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2105      	movs	r1, #5
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <main+0x150>)
 80005e6:	f000 ff17 	bl	8001418 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED4_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	210a      	movs	r1, #10
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0x150>)
 80005f0:	f000 ff12 	bl	8001418 <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 80005f4:	210f      	movs	r1, #15
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <main+0x150>)
 80005f8:	f000 ff26 	bl	8001448 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f000 fc6a 	bl	8000ed8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8000604:	e7f6      	b.n	80005f4 <main+0x12c>
 8000606:	bf00      	nop
 8000608:	08003468 	.word	0x08003468
 800060c:	40020000 	.word	0x40020000
 8000610:	200000e0 	.word	0x200000e0
 8000614:	20000028 	.word	0x20000028
 8000618:	40020800 	.word	0x40020800

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	; 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 ff08 	bl	8003440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800064e:	230a      	movs	r3, #10
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2300      	movs	r3, #0
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000666:	230d      	movs	r3, #13
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 195;
 800066a:	23c3      	movs	r3, #195	; 0xc3
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000672:	2304      	movs	r3, #4
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fefe 	bl	800147c <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000686:	f000 f9f3 	bl	8000a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2104      	movs	r1, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 f937 	bl	800191c <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b4:	f000 f9dc 	bl	8000a70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006b8:	2304      	movs	r3, #4
 80006ba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fb69 	bl	8001d9c <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006d0:	f000 f9ce 	bl	8000a70 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3758      	adds	r7, #88	; 0x58
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_RTC_Init+0xa8>)
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_RTC_Init+0xac>)
 80006f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_RTC_Init+0xa8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_RTC_Init+0xa8>)
 80006fe:	227f      	movs	r2, #127	; 0x7f
 8000700:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_RTC_Init+0xa8>)
 8000704:	22ff      	movs	r2, #255	; 0xff
 8000706:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_RTC_Init+0xa8>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_RTC_Init+0xa8>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_RTC_Init+0xa8>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800071a:	481a      	ldr	r0, [pc, #104]	; (8000784 <MX_RTC_Init+0xa8>)
 800071c:	f001 fc34 	bl	8001f88 <HAL_RTC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8000726:	f000 f9a3 	bl	8000a70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800072a:	2300      	movs	r3, #0
 800072c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800072e:	2300      	movs	r3, #0
 8000730:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000732:	2300      	movs	r3, #0
 8000734:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	480f      	ldr	r0, [pc, #60]	; (8000784 <MX_RTC_Init+0xa8>)
 8000746:	f001 fca9 	bl	800209c <HAL_RTC_SetTime>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_RTC_Init+0x78>
  {
    Error_Handler();
 8000750:	f000 f98e 	bl	8000a70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000754:	2301      	movs	r3, #1
 8000756:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000758:	2301      	movs	r3, #1
 800075a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800075c:	2301      	movs	r3, #1
 800075e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000760:	2300      	movs	r3, #0
 8000762:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_RTC_Init+0xa8>)
 800076c:	f001 fd4c 	bl	8002208 <HAL_RTC_SetDate>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8000776:	f000 f97b 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000c0 	.word	0x200000c0
 8000788:	40002800 	.word	0x40002800

0800078c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_SPI1_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_SPI1_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_SPI1_Init+0x64>)
 8000798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800079c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007c0:	2228      	movs	r2, #40	; 0x28
 80007c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007d8:	220a      	movs	r2, #10
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007de:	f001 fe24 	bl	800242a <HAL_SPI_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 f942 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000e0 	.word	0x200000e0
 80007f4:	40013000 	.word	0x40013000

080007f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_SPI3_Init+0x64>)
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_SPI3_Init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_SPI3_Init+0x64>)
 8000804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_SPI3_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_SPI3_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_SPI3_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI3_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_SPI3_Init+0x64>)
 8000824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000828:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI3_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_SPI3_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI3_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_SPI3_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI3_Init+0x64>)
 8000844:	220a      	movs	r2, #10
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_SPI3_Init+0x64>)
 800084a:	f001 fdee 	bl	800242a <HAL_SPI_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 f90c 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000028 	.word	0x20000028
 8000860:	40003c00 	.word	0x40003c00

08000864 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_USART1_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000870:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART1_UART_Init+0x4c>)
 800089c:	f002 fc74 	bl	8003188 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f8e3 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000080 	.word	0x20000080
 80008b4:	40011000 	.word	0x40011000

080008b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART2_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f002 fc4a 	bl	8003188 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f8b9 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000138 	.word	0x20000138
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a44      	ldr	r2, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x130>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a3d      	ldr	r2, [pc, #244]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a36      	ldr	r2, [pc, #216]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <MX_GPIO_Init+0x130>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <MX_GPIO_Init+0x130>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <MX_GPIO_Init+0x130>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	482a      	ldr	r0, [pc, #168]	; (8000a40 <MX_GPIO_Init+0x134>)
 8000998:	f000 fd3e 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSPOW_Pin|CS_CS_Pin|Q4_Pin|Q2_Pin
 800099c:	2201      	movs	r2, #1
 800099e:	f648 1112 	movw	r1, #35090	; 0x8912
 80009a2:	4828      	ldr	r0, [pc, #160]	; (8000a44 <MX_GPIO_Init+0x138>)
 80009a4:	f000 fd38 	bl	8001418 <HAL_GPIO_WritePin>
                          |Q1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Q7_Pin|Q8_Pin|Q12_Pin|Q10_Pin
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80009ae:	4824      	ldr	r0, [pc, #144]	; (8000a40 <MX_GPIO_Init+0x134>)
 80009b0:	f000 fd32 	bl	8001418 <HAL_GPIO_WritePin>
                          |Q9_Pin|Q3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Q6_Pin|Q5_Pin|Q15_Pin|Q16_Pin
 80009b4:	2201      	movs	r2, #1
 80009b6:	f24f 4103 	movw	r1, #62467	; 0xf403
 80009ba:	4823      	ldr	r0, [pc, #140]	; (8000a48 <MX_GPIO_Init+0x13c>)
 80009bc:	f000 fd2c 	bl	8001418 <HAL_GPIO_WritePin>
                          |Q14_Pin|Q13_Pin|Q11_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           Q7_Pin Q8_Pin Q12_Pin Q10_Pin
                           Q9_Pin Q3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80009c0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80009c4:	617b      	str	r3, [r7, #20]
                          |Q7_Pin|Q8_Pin|Q12_Pin|Q10_Pin
                          |Q9_Pin|Q3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4819      	ldr	r0, [pc, #100]	; (8000a40 <MX_GPIO_Init+0x134>)
 80009da:	f000 fb7f 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_Pin */
  GPIO_InitStruct.Pin = OUT_Pin;
 80009de:	2301      	movs	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4814      	ldr	r0, [pc, #80]	; (8000a44 <MX_GPIO_Init+0x138>)
 80009f2:	f000 fb73 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CSPOW_Pin CS_CS_Pin Q4_Pin Q2_Pin
                           Q1_Pin */
  GPIO_InitStruct.Pin = CSPOW_Pin|CS_CS_Pin|Q4_Pin|Q2_Pin
 80009f6:	f648 1312 	movw	r3, #35090	; 0x8912
 80009fa:	617b      	str	r3, [r7, #20]
                          |Q1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_GPIO_Init+0x138>)
 8000a10:	f000 fb64 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Q6_Pin Q5_Pin Q15_Pin Q16_Pin
                           Q14_Pin Q13_Pin Q11_Pin */
  GPIO_InitStruct.Pin = Q6_Pin|Q5_Pin|Q15_Pin|Q16_Pin
 8000a14:	f24f 4303 	movw	r3, #62467	; 0xf403
 8000a18:	617b      	str	r3, [r7, #20]
                          |Q14_Pin|Q13_Pin|Q11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_GPIO_Init+0x13c>)
 8000a2e:	f000 fb55 	bl	80010dc <HAL_GPIO_Init>

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400

08000a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5e:	f000 fa1f 	bl	8000ea0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40002000 	.word	0x40002000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <Error_Handler+0x6>

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x48>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_MspInit+0x48>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_MspInit+0x48>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_MspInit+0x48>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_MspInit+0x48>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_MspInit+0x48>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <HAL_RTC_MspInit+0x24>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d102      	bne.n	8000adc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_RTC_MspInit+0x28>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40002800 	.word	0x40002800
 8000aec:	42470e3c 	.word	0x42470e3c

08000af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <HAL_SPI_MspInit+0xe8>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12c      	bne.n	8000b6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b4a:	23e0      	movs	r3, #224	; 0xe0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	481e      	ldr	r0, [pc, #120]	; (8000be0 <HAL_SPI_MspInit+0xf0>)
 8000b66:	f000 fab9 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b6a:	e031      	b.n	8000bd0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <HAL_SPI_MspInit+0xf4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12c      	bne.n	8000bd0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_SPI_MspInit+0xec>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000bae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <HAL_SPI_MspInit+0xf8>)
 8000bcc:	f000 fa86 	bl	80010dc <HAL_GPIO_Init>
}
 8000bd0:	bf00      	nop
 8000bd2:	3730      	adds	r7, #48	; 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40003c00 	.word	0x40003c00
 8000be8:	40020800 	.word	0x40020800

08000bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <HAL_UART_MspInit+0xe8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12d      	bne.n	8000c6a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <HAL_UART_MspInit+0xf0>)
 8000c64:	f000 fa3a 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c68:	e030      	b.n	8000ccc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <HAL_UART_MspInit+0xf4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d12b      	bne.n	8000ccc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cac:	230c      	movs	r3, #12
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_UART_MspInit+0xf0>)
 8000cc8:	f000 fa08 	bl	80010dc <HAL_GPIO_Init>
}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	202d      	movs	r0, #45	; 0x2d
 8000cfa:	f000 f9c4 	bl	8001086 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000cfe:	202d      	movs	r0, #45	; 0x2d
 8000d00:	f000 f9dd 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <HAL_InitTick+0xa4>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <HAL_InitTick+0xa4>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <HAL_InitTick+0xa4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d20:	f107 0210 	add.w	r2, r7, #16
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 f806 	bl	8001d3c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d30:	f000 ffc0 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8000d34:	4603      	mov	r3, r0
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3c:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <HAL_InitTick+0xa8>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	0c9b      	lsrs	r3, r3, #18
 8000d44:	3b01      	subs	r3, #1
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_InitTick+0xac>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <HAL_InitTick+0xb0>)
 8000d4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_InitTick+0xac>)
 8000d50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d54:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_InitTick+0xac>)
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_InitTick+0xac>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_InitTick+0xac>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <HAL_InitTick+0xac>)
 8000d6a:	f001 ff6b 	bl	8002c44 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d104      	bne.n	8000d7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <HAL_InitTick+0xac>)
 8000d76:	f001 ffbd 	bl	8002cf4 <HAL_TIM_Base_Start_IT>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3730      	adds	r7, #48	; 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	431bde83 	.word	0x431bde83
 8000d90:	20000178 	.word	0x20000178
 8000d94:	40002000 	.word	0x40002000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
	...

08000de8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000dee:	f001 ffef 	bl	8002dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000178 	.word	0x20000178

08000dfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <Reset_Handler>:
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopFillZerobss+0x14>
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	e003      	b.n	8000e18 <LoopCopyDataInit>

08000e10 <CopyDataInit>:
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <LoopFillZerobss+0x18>)
 8000e12:	585b      	ldr	r3, [r3, r1]
 8000e14:	5043      	str	r3, [r0, r1]
 8000e16:	3104      	adds	r1, #4

08000e18 <LoopCopyDataInit>:
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <LoopFillZerobss+0x1c>)
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <LoopFillZerobss+0x20>)
 8000e1c:	1842      	adds	r2, r0, r1
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3f6      	bcc.n	8000e10 <CopyDataInit>
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <LoopFillZerobss+0x24>)
 8000e24:	e002      	b.n	8000e2c <LoopFillZerobss>

08000e26 <FillZerobss>:
 8000e26:	2300      	movs	r3, #0
 8000e28:	f842 3b04 	str.w	r3, [r2], #4

08000e2c <LoopFillZerobss>:
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <LoopFillZerobss+0x28>)
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3f9      	bcc.n	8000e26 <FillZerobss>
 8000e32:	f7ff ffe3 	bl	8000dfc <SystemInit>
 8000e36:	f002 fadf 	bl	80033f8 <__libc_init_array>
 8000e3a:	f7ff fb45 	bl	80004c8 <main>
 8000e3e:	4770      	bx	lr
 8000e40:	20020000 	.word	0x20020000
 8000e44:	08003494 	.word	0x08003494
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	2000000c 	.word	0x2000000c
 8000e54:	200001c4 	.word	0x200001c4

08000e58 <ADC_IRQHandler>:
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <HAL_Init+0x40>)
 8000e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_Init+0x40>)
 8000e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_Init+0x40>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f8f3 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff2a 	bl	8000ce4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fdf2 	bl	8000a78 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023c00 	.word	0x40023c00

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	200001c0 	.word	0x200001c0

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <HAL_GetTick+0x10>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	200001c0 	.word	0x200001c0

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff fff0 	bl	8000ec4 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_Delay+0x40>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffe0 	bl	8000ec4 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000008 	.word	0x20000008

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4906      	ldr	r1, [pc, #24]	; (8000fb4 <__NVIC_EnableIRQ+0x34>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff4f 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff64 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ffb2 	bl	800100c <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff81 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff57 	bl	8000f80 <__NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e16f      	b.n	80013cc <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8161 	beq.w	80013c6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d00b      	beq.n	8001124 <HAL_GPIO_Init+0x48>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d007      	beq.n	8001124 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001118:	2b11      	cmp	r3, #17
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d130      	bne.n	8001186 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800115a:	2201      	movs	r2, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	f003 0201 	and.w	r2, r3, #1
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0xea>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d123      	bne.n	800120e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	6939      	ldr	r1, [r7, #16]
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0203 	and.w	r2, r3, #3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80bb 	beq.w	80013c6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <HAL_GPIO_Init+0x30c>)
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	4a63      	ldr	r2, [pc, #396]	; (80013e8 <HAL_GPIO_Init+0x30c>)
 800125a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125e:	6453      	str	r3, [r2, #68]	; 0x44
 8001260:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <HAL_GPIO_Init+0x30c>)
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800126c:	4a5f      	ldr	r2, [pc, #380]	; (80013ec <HAL_GPIO_Init+0x310>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a57      	ldr	r2, [pc, #348]	; (80013f0 <HAL_GPIO_Init+0x314>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d031      	beq.n	80012fc <HAL_GPIO_Init+0x220>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a56      	ldr	r2, [pc, #344]	; (80013f4 <HAL_GPIO_Init+0x318>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d02b      	beq.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a55      	ldr	r2, [pc, #340]	; (80013f8 <HAL_GPIO_Init+0x31c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d025      	beq.n	80012f4 <HAL_GPIO_Init+0x218>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a54      	ldr	r2, [pc, #336]	; (80013fc <HAL_GPIO_Init+0x320>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d01f      	beq.n	80012f0 <HAL_GPIO_Init+0x214>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a53      	ldr	r2, [pc, #332]	; (8001400 <HAL_GPIO_Init+0x324>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d019      	beq.n	80012ec <HAL_GPIO_Init+0x210>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a52      	ldr	r2, [pc, #328]	; (8001404 <HAL_GPIO_Init+0x328>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d013      	beq.n	80012e8 <HAL_GPIO_Init+0x20c>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a51      	ldr	r2, [pc, #324]	; (8001408 <HAL_GPIO_Init+0x32c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00d      	beq.n	80012e4 <HAL_GPIO_Init+0x208>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a50      	ldr	r2, [pc, #320]	; (800140c <HAL_GPIO_Init+0x330>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0x204>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <HAL_GPIO_Init+0x334>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d101      	bne.n	80012dc <HAL_GPIO_Init+0x200>
 80012d8:	2308      	movs	r3, #8
 80012da:	e010      	b.n	80012fe <HAL_GPIO_Init+0x222>
 80012dc:	2309      	movs	r3, #9
 80012de:	e00e      	b.n	80012fe <HAL_GPIO_Init+0x222>
 80012e0:	2307      	movs	r3, #7
 80012e2:	e00c      	b.n	80012fe <HAL_GPIO_Init+0x222>
 80012e4:	2306      	movs	r3, #6
 80012e6:	e00a      	b.n	80012fe <HAL_GPIO_Init+0x222>
 80012e8:	2305      	movs	r3, #5
 80012ea:	e008      	b.n	80012fe <HAL_GPIO_Init+0x222>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e006      	b.n	80012fe <HAL_GPIO_Init+0x222>
 80012f0:	2303      	movs	r3, #3
 80012f2:	e004      	b.n	80012fe <HAL_GPIO_Init+0x222>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_Init+0x222>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <HAL_GPIO_Init+0x222>
 80012fc:	2300      	movs	r3, #0
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	f002 0203 	and.w	r2, r2, #3
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	4093      	lsls	r3, r2
 8001308:	461a      	mov	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001310:	4936      	ldr	r1, [pc, #216]	; (80013ec <HAL_GPIO_Init+0x310>)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_GPIO_Init+0x338>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001342:	4a34      	ldr	r2, [pc, #208]	; (8001414 <HAL_GPIO_Init+0x338>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001348:	4b32      	ldr	r3, [pc, #200]	; (8001414 <HAL_GPIO_Init+0x338>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800136c:	4a29      	ldr	r2, [pc, #164]	; (8001414 <HAL_GPIO_Init+0x338>)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <HAL_GPIO_Init+0x338>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_GPIO_Init+0x338>)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_GPIO_Init+0x338>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_GPIO_Init+0x338>)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f47f ae88 	bne.w	80010ec <HAL_GPIO_Init+0x10>
  }
}
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40013800 	.word	0x40013800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40021000 	.word	0x40021000
 8001404:	40021400 	.word	0x40021400
 8001408:	40021800 	.word	0x40021800
 800140c:	40021c00 	.word	0x40021c00
 8001410:	40022000 	.word	0x40022000
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43d9      	mvns	r1, r3
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	400b      	ands	r3, r1
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
	...

0800147c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e237      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d050      	beq.n	800153c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149a:	4ba3      	ldr	r3, [pc, #652]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d00c      	beq.n	80014c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d112      	bne.n	80014d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b2:	4b9d      	ldr	r3, [pc, #628]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014be:	d10b      	bne.n	80014d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	4b99      	ldr	r3, [pc, #612]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d036      	beq.n	800153a <HAL_RCC_OscConfig+0xbe>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d132      	bne.n	800153a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e212      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4b93      	ldr	r3, [pc, #588]	; (800172c <HAL_RCC_OscConfig+0x2b0>)
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d013      	beq.n	8001512 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fceb 	bl	8000ec4 <HAL_GetTick>
 80014ee:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f2:	f7ff fce7 	bl	8000ec4 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1fc      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001504:	4b88      	ldr	r3, [pc, #544]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x76>
 8001510:	e014      	b.n	800153c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fcd7 	bl	8000ec4 <HAL_GetTick>
 8001516:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151a:	f7ff fcd3 	bl	8000ec4 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b64      	cmp	r3, #100	; 0x64
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1e8      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152c:	4b7e      	ldr	r3, [pc, #504]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x9e>
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d077      	beq.n	8001638 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001548:	4b77      	ldr	r3, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00b      	beq.n	800156c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001554:	4b74      	ldr	r3, [pc, #464]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155c:	2b08      	cmp	r3, #8
 800155e:	d126      	bne.n	80015ae <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001560:	4b71      	ldr	r3, [pc, #452]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d120      	bne.n	80015ae <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156c:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_OscConfig+0x108>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e1bc      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	21f8      	movs	r1, #248	; 0xf8
 8001592:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	69b9      	ldr	r1, [r7, #24]
 8001596:	fa91 f1a1 	rbit	r1, r1
 800159a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800159c:	6979      	ldr	r1, [r7, #20]
 800159e:	fab1 f181 	clz	r1, r1
 80015a2:	b2c9      	uxtb	r1, r1
 80015a4:	408b      	lsls	r3, r1
 80015a6:	4960      	ldr	r1, [pc, #384]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ac:	e044      	b.n	8001638 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d02a      	beq.n	800160c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b6:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <HAL_RCC_OscConfig+0x2b4>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc82 	bl	8000ec4 <HAL_GetTick>
 80015c0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc7e 	bl	8000ec4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e193      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	4b54      	ldr	r3, [pc, #336]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b51      	ldr	r3, [pc, #324]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	21f8      	movs	r1, #248	; 0xf8
 80015f0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	6939      	ldr	r1, [r7, #16]
 80015f4:	fa91 f1a1 	rbit	r1, r1
 80015f8:	60f9      	str	r1, [r7, #12]
  return result;
 80015fa:	68f9      	ldr	r1, [r7, #12]
 80015fc:	fab1 f181 	clz	r1, r1
 8001600:	b2c9      	uxtb	r1, r1
 8001602:	408b      	lsls	r3, r1
 8001604:	4948      	ldr	r1, [pc, #288]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
 800160a:	e015      	b.n	8001638 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160c:	4b48      	ldr	r3, [pc, #288]	; (8001730 <HAL_RCC_OscConfig+0x2b4>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fc57 	bl	8000ec4 <HAL_GetTick>
 8001616:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fc53 	bl	8000ec4 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e168      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162c:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d030      	beq.n	80016a6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d016      	beq.n	800167a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_RCC_OscConfig+0x2b8>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fc37 	bl	8000ec4 <HAL_GetTick>
 8001656:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fc33 	bl	8000ec4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e148      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166c:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800166e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x1de>
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <HAL_RCC_OscConfig+0x2b8>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff fc20 	bl	8000ec4 <HAL_GetTick>
 8001684:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fc1c 	bl	8000ec4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e131      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8088 	beq.w	80017c4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d110      	bne.n	80016e8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a16      	ldr	r2, [pc, #88]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_RCC_OscConfig+0x2bc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_RCC_OscConfig+0x2bc>)
 80016ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_RCC_OscConfig+0x2bc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d123      	bne.n	8001748 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_RCC_OscConfig+0x2bc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <HAL_RCC_OscConfig+0x2bc>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170c:	f7ff fbda 	bl	8000ec4 <HAL_GetTick>
 8001710:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	e013      	b.n	800173c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001714:	f7ff fbd6 	bl	8000ec4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d90c      	bls.n	800173c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0eb      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40023802 	.word	0x40023802
 8001730:	42470000 	.word	0x42470000
 8001734:	42470e80 	.word	0x42470e80
 8001738:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b72      	ldr	r3, [pc, #456]	; (8001908 <HAL_RCC_OscConfig+0x48c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0e5      	beq.n	8001714 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4b6f      	ldr	r3, [pc, #444]	; (800190c <HAL_RCC_OscConfig+0x490>)
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d015      	beq.n	8001786 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff fbb3 	bl	8000ec4 <HAL_GetTick>
 800175e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fbaf 	bl	8000ec4 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0c2      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	4b65      	ldr	r3, [pc, #404]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ee      	beq.n	8001762 <HAL_RCC_OscConfig+0x2e6>
 8001784:	e014      	b.n	80017b0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fb9d 	bl	8000ec4 <HAL_GetTick>
 800178a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fb99 	bl	8000ec4 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0ac      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ee      	bne.n	800178e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4b55      	ldr	r3, [pc, #340]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a54      	ldr	r2, [pc, #336]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8097 	beq.w	80018fc <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ce:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d061      	beq.n	800189e <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d146      	bne.n	8001870 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_RCC_OscConfig+0x498>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb6c 	bl	8000ec4 <HAL_GetTick>
 80017ec:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fb68 	bl	8000ec4 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e07d      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x49c>)
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	69d1      	ldr	r1, [r2, #28]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6a12      	ldr	r2, [r2, #32]
 800181e:	4311      	orrs	r1, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001824:	0192      	lsls	r2, r2, #6
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800182c:	0612      	lsls	r2, r2, #24
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001834:	0852      	lsrs	r2, r2, #1
 8001836:	3a01      	subs	r2, #1
 8001838:	0412      	lsls	r2, r2, #16
 800183a:	430a      	orrs	r2, r1
 800183c:	4934      	ldr	r1, [pc, #208]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_RCC_OscConfig+0x498>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fb3c 	bl	8000ec4 <HAL_GetTick>
 800184c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fb38 	bl	8000ec4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e04d      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x3d4>
 800186e:	e045      	b.n	80018fc <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <HAL_RCC_OscConfig+0x498>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fb25 	bl	8000ec4 <HAL_GetTick>
 800187a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff fb21 	bl	8000ec4 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b64      	cmp	r3, #100	; 0x64
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e036      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0x402>
 800189c:	e02e      	b.n	80018fc <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e029      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_RCC_OscConfig+0x494>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d115      	bne.n	80018f8 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d106      	bne.n	80018f8 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40007000 	.word	0x40007000
 800190c:	40023870 	.word	0x40023870
 8001910:	40023800 	.word	0x40023800
 8001914:	42470060 	.word	0x42470060
 8001918:	f0bc8000 	.word	0xf0bc8000

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0d2      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b6b      	ldr	r3, [pc, #428]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d90c      	bls.n	8001958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0be      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001970:	4b5c      	ldr	r3, [pc, #368]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a5b      	ldr	r2, [pc, #364]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800197a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001988:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a55      	ldr	r2, [pc, #340]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001992:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4950      	ldr	r1, [pc, #320]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d040      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d115      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e085      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e079      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e071      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4939      	ldr	r1, [pc, #228]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff fa5e 	bl	8000ec4 <HAL_GetTick>
 8001a08:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff fa5a 	bl	8000ec4 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e059      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d20c      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e03c      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	491b      	ldr	r1, [pc, #108]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4913      	ldr	r1, [pc, #76]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001a9a:	f000 f82b 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa8:	22f0      	movs	r2, #240	; 0xf0
 8001aaa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	fa92 f2a2 	rbit	r2, r2
 8001ab2:	60fa      	str	r2, [r7, #12]
  return result;
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	fab2 f282 	clz	r2, r2
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	40d3      	lsrs	r3, r2
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1d0>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1d4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f908 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	0800346c 	.word	0x0800346c
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d007      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x32>
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d008      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x38>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 80b4 	bne.w	8001c88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b22:	60bb      	str	r3, [r7, #8]
       break;
 8001b24:	e0b3      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b26:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b28:	60bb      	str	r3, [r7, #8]
      break;
 8001b2a:	e0b0      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2c:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b36:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d04a      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	f04f 0400 	mov.w	r4, #0
 8001b4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	ea03 0501 	and.w	r5, r3, r1
 8001b58:	ea04 0602 	and.w	r6, r4, r2
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4632      	mov	r2, r6
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	f04f 0400 	mov.w	r4, #0
 8001b68:	0154      	lsls	r4, r2, #5
 8001b6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b6e:	014b      	lsls	r3, r1, #5
 8001b70:	4619      	mov	r1, r3
 8001b72:	4622      	mov	r2, r4
 8001b74:	1b49      	subs	r1, r1, r5
 8001b76:	eb62 0206 	sbc.w	r2, r2, r6
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	f04f 0400 	mov.w	r4, #0
 8001b82:	0194      	lsls	r4, r2, #6
 8001b84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b88:	018b      	lsls	r3, r1, #6
 8001b8a:	1a5b      	subs	r3, r3, r1
 8001b8c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b90:	f04f 0100 	mov.w	r1, #0
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	00e2      	lsls	r2, r4, #3
 8001b9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b9e:	00d9      	lsls	r1, r3, #3
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	195b      	adds	r3, r3, r5
 8001ba6:	eb44 0406 	adc.w	r4, r4, r6
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	02a2      	lsls	r2, r4, #10
 8001bb4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bb8:	0299      	lsls	r1, r3, #10
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f04f 0400 	mov.w	r4, #0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4623      	mov	r3, r4
 8001bcc:	f7fe fafa 	bl	80001c4 <__aeabi_uldivmod>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e049      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	f04f 0400 	mov.w	r4, #0
 8001be2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	ea03 0501 	and.w	r5, r3, r1
 8001bee:	ea04 0602 	and.w	r6, r4, r2
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	4632      	mov	r2, r6
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	f04f 0400 	mov.w	r4, #0
 8001bfe:	0154      	lsls	r4, r2, #5
 8001c00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c04:	014b      	lsls	r3, r1, #5
 8001c06:	4619      	mov	r1, r3
 8001c08:	4622      	mov	r2, r4
 8001c0a:	1b49      	subs	r1, r1, r5
 8001c0c:	eb62 0206 	sbc.w	r2, r2, r6
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	f04f 0400 	mov.w	r4, #0
 8001c18:	0194      	lsls	r4, r2, #6
 8001c1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c1e:	018b      	lsls	r3, r1, #6
 8001c20:	1a5b      	subs	r3, r3, r1
 8001c22:	eb64 0402 	sbc.w	r4, r4, r2
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	00e2      	lsls	r2, r4, #3
 8001c30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c34:	00d9      	lsls	r1, r3, #3
 8001c36:	460b      	mov	r3, r1
 8001c38:	4614      	mov	r4, r2
 8001c3a:	195b      	adds	r3, r3, r5
 8001c3c:	eb44 0406 	adc.w	r4, r4, r6
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	02a2      	lsls	r2, r4, #10
 8001c4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c4e:	0299      	lsls	r1, r3, #10
 8001c50:	460b      	mov	r3, r1
 8001c52:	4614      	mov	r4, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	4621      	mov	r1, r4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f04f 0400 	mov.w	r4, #0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4623      	mov	r3, r4
 8001c62:	f7fe faaf 	bl	80001c4 <__aeabi_uldivmod>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	3301      	adds	r3, #1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	60bb      	str	r3, [r7, #8]
      break;
 8001c86:	e002      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c8a:	60bb      	str	r3, [r7, #8]
      break;
 8001c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	00f42400 	.word	0x00f42400

08001ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001cba:	f7ff fff1 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cbe:	4601      	mov	r1, r0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001cc8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001ccc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	fa92 f2a2 	rbit	r2, r2
 8001cd4:	603a      	str	r2, [r7, #0]
  return result;
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	fab2 f282 	clz	r2, r2
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	40d3      	lsrs	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	0800347c 	.word	0x0800347c

08001cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001cfe:	f7ff ffcf 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001d02:	4601      	mov	r1, r0
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d0c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001d10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	fa92 f2a2 	rbit	r2, r2
 8001d18:	603a      	str	r2, [r7, #0]
  return result;
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	40d3      	lsrs	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	0800347c 	.word	0x0800347c

08001d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	220f      	movs	r2, #15
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_RCC_GetClockConfig+0x58>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_RCC_GetClockConfig+0x58>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_GetClockConfig+0x58>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_RCC_GetClockConfig+0x58>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d14c      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001dc0:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc6:	f7ff f87d 	bl	8000ec4 <HAL_GetTick>
 8001dca:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dce:	f7ff f879 	bl	8000ec4 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e0c7      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001de0:	4b66      	ldr	r3, [pc, #408]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	fa92 f2a2 	rbit	r2, r2
 8001dfc:	613a      	str	r2, [r7, #16]
  return result;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	fab2 f282 	clz	r2, r2
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	fa03 f202 	lsl.w	r2, r3, r2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001e12:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	69f9      	ldr	r1, [r7, #28]
 8001e16:	fa91 f1a1 	rbit	r1, r1
 8001e1a:	61b9      	str	r1, [r7, #24]
  return result;
 8001e1c:	69b9      	ldr	r1, [r7, #24]
 8001e1e:	fab1 f181 	clz	r1, r1
 8001e22:	b2c9      	uxtb	r1, r1
 8001e24:	408b      	lsls	r3, r1
 8001e26:	4955      	ldr	r1, [pc, #340]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e2e:	4b52      	ldr	r3, [pc, #328]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e34:	f7ff f846 	bl	8000ec4 <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e3c:	f7ff f842 	bl	8000ec4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e090      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e4e:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8083 	beq.w	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a42      	ldr	r2, [pc, #264]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
 8001e78:	4b40      	ldr	r3, [pc, #256]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e84:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e90:	f7ff f818 	bl	8000ec4 <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7ff f814 	bl	8000ec4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e062      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001eaa:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb6:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebe:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d02f      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ece:	6a3a      	ldr	r2, [r7, #32]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d028      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001edc:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001eea:	4a24      	ldr	r2, [pc, #144]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d114      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe ffe2 	bl	8000ec4 <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7fe ffde 	bl	8000ec4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e02a      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ee      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f32:	d10d      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f48:	490c      	ldr	r1, [pc, #48]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
 8001f4e:	e005      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f5a:	6093      	str	r3, [r2, #8]
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f68:	4904      	ldr	r1, [pc, #16]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	42470068 	.word	0x42470068
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40007000 	.word	0x40007000
 8001f84:	42470e40 	.word	0x42470e40

08001f88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07c      	b.n	8002094 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7f5b      	ldrb	r3, [r3, #29]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fd8a 	bl	8000ac4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	22ca      	movs	r2, #202	; 0xca
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2253      	movs	r2, #83	; 0x53
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f9e6 	bl	8002398 <RTC_EnterInitMode>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	22ff      	movs	r2, #255	; 0xff
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e057      	b.n	8002094 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ff6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6899      	ldr	r1, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68d2      	ldr	r2, [r2, #12]
 800201e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6919      	ldr	r1, [r3, #16]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	041a      	lsls	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002042:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f97f 	bl	8002348 <HAL_RTC_WaitForSynchro>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	22ff      	movs	r2, #255	; 0xff
 8002056:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2204      	movs	r2, #4
 800205c:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e018      	b.n	8002094 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002092:	2300      	movs	r3, #0
  }
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	7f1b      	ldrb	r3, [r3, #28]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_RTC_SetTime+0x1c>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0a3      	b.n	8002200 <HAL_RTC_SetTime+0x164>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2202      	movs	r2, #2
 80020c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d126      	bne.n	8002118 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2200      	movs	r2, #0
 80020dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f984 	bl	80023f0 <RTC_ByteToBcd2>
 80020e8:	4603      	mov	r3, r0
 80020ea:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 f97d 	bl	80023f0 <RTC_ByteToBcd2>
 80020f6:	4603      	mov	r3, r0
 80020f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80020fa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	789b      	ldrb	r3, [r3, #2]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f975 	bl	80023f0 <RTC_ByteToBcd2>
 8002106:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002108:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	78db      	ldrb	r3, [r3, #3]
 8002110:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002112:	4313      	orrs	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e018      	b.n	800214a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2200      	movs	r2, #0
 800212a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	785b      	ldrb	r3, [r3, #1]
 8002136:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002138:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800213e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	78db      	ldrb	r3, [r3, #3]
 8002144:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002146:	4313      	orrs	r3, r2
 8002148:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	22ca      	movs	r2, #202	; 0xca
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2253      	movs	r2, #83	; 0x53
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f91c 	bl	8002398 <RTC_EnterInitMode>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	22ff      	movs	r2, #255	; 0xff
 800216c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2204      	movs	r2, #4
 8002172:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e040      	b.n	8002200 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002188:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800218c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800219c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c4:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f8be 	bl	8002348 <HAL_RTC_WaitForSynchro>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	22ff      	movs	r2, #255	; 0xff
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2204      	movs	r2, #4
 80021de:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00a      	b.n	8002200 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	22ff      	movs	r2, #255	; 0xff
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
  }
}
 8002200:	4618      	mov	r0, r3
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}

08002208 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	7f1b      	ldrb	r3, [r3, #28]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_RTC_SetDate+0x1c>
 8002220:	2302      	movs	r3, #2
 8002222:	e08d      	b.n	8002340 <HAL_RTC_SetDate+0x138>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2202      	movs	r2, #2
 800222e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10e      	bne.n	8002254 <HAL_RTC_SetDate+0x4c>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	785b      	ldrb	r3, [r3, #1]
 8002246:	f023 0310 	bic.w	r3, r3, #16
 800224a:	b2db      	uxtb	r3, r3
 800224c:	330a      	adds	r3, #10
 800224e:	b2da      	uxtb	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11c      	bne.n	8002294 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	78db      	ldrb	r3, [r3, #3]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f8c6 	bl	80023f0 <RTC_ByteToBcd2>
 8002264:	4603      	mov	r3, r0
 8002266:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	785b      	ldrb	r3, [r3, #1]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f8bf 	bl	80023f0 <RTC_ByteToBcd2>
 8002272:	4603      	mov	r3, r0
 8002274:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002276:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	789b      	ldrb	r3, [r3, #2]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f8b7 	bl	80023f0 <RTC_ByteToBcd2>
 8002282:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002284:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e00e      	b.n	80022b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	78db      	ldrb	r3, [r3, #3]
 8002298:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80022a0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80022a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	22ca      	movs	r2, #202	; 0xca
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2253      	movs	r2, #83	; 0x53
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f868 	bl	8002398 <RTC_EnterInitMode>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	22ff      	movs	r2, #255	; 0xff
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2204      	movs	r2, #4
 80022da:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e02c      	b.n	8002340 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002304:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f81e 	bl	8002348 <HAL_RTC_WaitForSynchro>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	22ff      	movs	r2, #255	; 0xff
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2204      	movs	r2, #4
 800231e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00a      	b.n	8002340 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	22ff      	movs	r2, #255	; 0xff
 8002330:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800233e:	2300      	movs	r3, #0
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd90      	pop	{r4, r7, pc}

08002348 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002362:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002364:	f7fe fdae 	bl	8000ec4 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800236a:	e009      	b.n	8002380 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800236c:	f7fe fdaa 	bl	8000ec4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800237a:	d901      	bls.n	8002380 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e007      	b.n	8002390 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ee      	beq.n	800236c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d119      	bne.n	80023e6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023bc:	f7fe fd82 	bl	8000ec4 <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023c2:	e009      	b.n	80023d8 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023c4:	f7fe fd7e 	bl	8000ec4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d2:	d901      	bls.n	80023d8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e007      	b.n	80023e8 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ee      	beq.n	80023c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 80023fe:	e005      	b.n	800240c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3301      	adds	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	3b0a      	subs	r3, #10
 800240a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	2b09      	cmp	r3, #9
 8002410:	d8f6      	bhi.n	8002400 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	b2da      	uxtb	r2, r3
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4313      	orrs	r3, r2
 800241e:	b2db      	uxtb	r3, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr

0800242a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e07b      	b.n	8002534 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	2b00      	cmp	r3, #0
 8002442:	d108      	bne.n	8002456 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800244c:	d009      	beq.n	8002462 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	61da      	str	r2, [r3, #28]
 8002454:	e005      	b.n	8002462 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7fe fb37 	bl	8000af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002498:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e6:	ea42 0103 	orr.w	r1, r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	0c1b      	lsrs	r3, r3, #16
 8002500:	f003 0104 	and.w	r1, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	f003 0210 	and.w	r2, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_SPI_Transmit+0x22>
 800255a:	2302      	movs	r3, #2
 800255c:	e126      	b.n	80027ac <HAL_SPI_Transmit+0x270>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002566:	f7fe fcad 	bl	8000ec4 <HAL_GetTick>
 800256a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d002      	beq.n	8002582 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800257c:	2302      	movs	r3, #2
 800257e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002580:	e10b      	b.n	800279a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_SPI_Transmit+0x52>
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002592:	e102      	b.n	800279a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2203      	movs	r2, #3
 8002598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025da:	d10f      	bne.n	80025fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d007      	beq.n	800261a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002622:	d14b      	bne.n	80026bc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_SPI_Transmit+0xf6>
 800262c:	8afb      	ldrh	r3, [r7, #22]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d13e      	bne.n	80026b0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	1c9a      	adds	r2, r3, #2
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002656:	e02b      	b.n	80026b0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d112      	bne.n	800268c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	881a      	ldrh	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	1c9a      	adds	r2, r3, #2
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	86da      	strh	r2, [r3, #54]	; 0x36
 800268a:	e011      	b.n	80026b0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800268c:	f7fe fc1a 	bl	8000ec4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d803      	bhi.n	80026a4 <HAL_SPI_Transmit+0x168>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a2:	d102      	bne.n	80026aa <HAL_SPI_Transmit+0x16e>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026ae:	e074      	b.n	800279a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ce      	bne.n	8002658 <HAL_SPI_Transmit+0x11c>
 80026ba:	e04c      	b.n	8002756 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_SPI_Transmit+0x18e>
 80026c4:	8afb      	ldrh	r3, [r7, #22]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d140      	bne.n	800274c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026f0:	e02c      	b.n	800274c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d113      	bne.n	8002728 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	7812      	ldrb	r2, [r2, #0]
 800270c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	86da      	strh	r2, [r3, #54]	; 0x36
 8002726:	e011      	b.n	800274c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002728:	f7fe fbcc 	bl	8000ec4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d803      	bhi.n	8002740 <HAL_SPI_Transmit+0x204>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800273e:	d102      	bne.n	8002746 <HAL_SPI_Transmit+0x20a>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	77fb      	strb	r3, [r7, #31]
          goto error;
 800274a:	e026      	b.n	800279a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1cd      	bne.n	80026f2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fa54 	bl	8002c08 <SPI_EndRxTxTransaction>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	77fb      	strb	r3, [r7, #31]
 8002796:	e000      	b.n	800279a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002798:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027c2:	2301      	movs	r3, #1
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_SPI_TransmitReceive+0x26>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e18a      	b.n	8002af0 <HAL_SPI_TransmitReceive+0x33c>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027e2:	f7fe fb6f 	bl	8000ec4 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027f8:	887b      	ldrh	r3, [r7, #2]
 80027fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002800:	2b01      	cmp	r3, #1
 8002802:	d00f      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x70>
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800280a:	d107      	bne.n	800281c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d103      	bne.n	800281c <HAL_SPI_TransmitReceive+0x68>
 8002814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002818:	2b04      	cmp	r3, #4
 800281a:	d003      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800281c:	2302      	movs	r3, #2
 800281e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002822:	e15b      	b.n	8002adc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_SPI_TransmitReceive+0x82>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_SPI_TransmitReceive+0x82>
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800283c:	e14e      	b.n	8002adc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b04      	cmp	r3, #4
 8002848:	d003      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2205      	movs	r2, #5
 800284e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	887a      	ldrh	r2, [r7, #2]
 800287a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d007      	beq.n	80028a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ae:	d178      	bne.n	80029a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_SPI_TransmitReceive+0x10a>
 80028b8:	8b7b      	ldrh	r3, [r7, #26]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d166      	bne.n	800298c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	881a      	ldrh	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	1c9a      	adds	r2, r3, #2
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028e2:	e053      	b.n	800298c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d11b      	bne.n	800292a <HAL_SPI_TransmitReceive+0x176>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d016      	beq.n	800292a <HAL_SPI_TransmitReceive+0x176>
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d113      	bne.n	800292a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	881a      	ldrh	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	1c9a      	adds	r2, r3, #2
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d119      	bne.n	800296c <HAL_SPI_TransmitReceive+0x1b8>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d014      	beq.n	800296c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	b292      	uxth	r2, r2
 800294e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	1c9a      	adds	r2, r3, #2
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002968:	2301      	movs	r3, #1
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800296c:	f7fe faaa 	bl	8000ec4 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002978:	429a      	cmp	r2, r3
 800297a:	d807      	bhi.n	800298c <HAL_SPI_TransmitReceive+0x1d8>
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002982:	d003      	beq.n	800298c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800298a:	e0a7      	b.n	8002adc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1a6      	bne.n	80028e4 <HAL_SPI_TransmitReceive+0x130>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1a1      	bne.n	80028e4 <HAL_SPI_TransmitReceive+0x130>
 80029a0:	e07c      	b.n	8002a9c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_TransmitReceive+0x1fc>
 80029aa:	8b7b      	ldrh	r3, [r7, #26]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d16b      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d6:	e057      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d11c      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x26c>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d017      	beq.n	8002a20 <HAL_SPI_TransmitReceive+0x26c>
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d114      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d119      	bne.n	8002a62 <HAL_SPI_TransmitReceive+0x2ae>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d014      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a62:	f7fe fa2f 	bl	8000ec4 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d803      	bhi.n	8002a7a <HAL_SPI_TransmitReceive+0x2c6>
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a78:	d102      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0x2cc>
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a86:	e029      	b.n	8002adc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1a2      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x224>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d19d      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f8b1 	bl	8002c08 <SPI_EndRxTxTransaction>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ab8:	e010      	b.n	8002adc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10b      	bne.n	8002ada <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	e000      	b.n	8002adc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ada:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3730      	adds	r7, #48	; 0x30
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b08:	f7fe f9dc 	bl	8000ec4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	4413      	add	r3, r2
 8002b16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b18:	f7fe f9d4 	bl	8000ec4 <HAL_GetTick>
 8002b1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b1e:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	015b      	lsls	r3, r3, #5
 8002b24:	0d1b      	lsrs	r3, r3, #20
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b2e:	e054      	b.n	8002bda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b36:	d050      	beq.n	8002bda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b38:	f7fe f9c4 	bl	8000ec4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d902      	bls.n	8002b4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d13d      	bne.n	8002bca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b66:	d111      	bne.n	8002b8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b70:	d004      	beq.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d107      	bne.n	8002b8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b94:	d10f      	bne.n	8002bb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e017      	b.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4013      	ands	r3, r2
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d19b      	bne.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000000 	.word	0x20000000

08002c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7ff ff6a 	bl	8002af8 <SPI_WaitFlagStateUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e000      	b.n	8002c3c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e041      	b.n	8002cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f839 	bl	8002ce2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f000 f9d0 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e04e      	b.n	8002daa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d01d      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_TIM_Base_Start_IT+0xc8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d111      	bne.n	8002d98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d010      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d96:	e007      	b.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40000c00 	.word	0x40000c00
 8002dc4:	40010400 	.word	0x40010400
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40001800 	.word	0x40001800

08002dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d122      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d11b      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0202 	mvn.w	r2, #2
 8002dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8ed 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002e18:	e005      	b.n	8002e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8e0 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f8ef 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d122      	bne.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d11b      	bne.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0204 	mvn.w	r2, #4
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8c3 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8b6 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f8c5 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d122      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0208 	mvn.w	r2, #8
 8002ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f899 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002ec0:	e005      	b.n	8002ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f88c 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f89b 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d122      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d11b      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0210 	mvn.w	r2, #16
 8002ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2208      	movs	r2, #8
 8002efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f86f 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f862 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f871 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10e      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0201 	mvn.w	r2, #1
 8002f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd fd7c 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b80      	cmp	r3, #128	; 0x80
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f8fb 	bl	8003176 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f835 	bl	8003016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0220 	mvn.w	r2, #32
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8c6 	bl	8003164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a3f      	ldr	r2, [pc, #252]	; (8003138 <TIM_Base_SetConfig+0x110>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d00f      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a3c      	ldr	r2, [pc, #240]	; (800313c <TIM_Base_SetConfig+0x114>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00b      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a3b      	ldr	r2, [pc, #236]	; (8003140 <TIM_Base_SetConfig+0x118>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3a      	ldr	r2, [pc, #232]	; (8003144 <TIM_Base_SetConfig+0x11c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a39      	ldr	r2, [pc, #228]	; (8003148 <TIM_Base_SetConfig+0x120>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2e      	ldr	r2, [pc, #184]	; (8003138 <TIM_Base_SetConfig+0x110>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d02b      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d027      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2b      	ldr	r2, [pc, #172]	; (800313c <TIM_Base_SetConfig+0x114>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d023      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2a      	ldr	r2, [pc, #168]	; (8003140 <TIM_Base_SetConfig+0x118>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01f      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a29      	ldr	r2, [pc, #164]	; (8003144 <TIM_Base_SetConfig+0x11c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01b      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a28      	ldr	r2, [pc, #160]	; (8003148 <TIM_Base_SetConfig+0x120>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d017      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a27      	ldr	r2, [pc, #156]	; (800314c <TIM_Base_SetConfig+0x124>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a26      	ldr	r2, [pc, #152]	; (8003150 <TIM_Base_SetConfig+0x128>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00f      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <TIM_Base_SetConfig+0x12c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00b      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a24      	ldr	r2, [pc, #144]	; (8003158 <TIM_Base_SetConfig+0x130>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d007      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a23      	ldr	r2, [pc, #140]	; (800315c <TIM_Base_SetConfig+0x134>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d003      	beq.n	80030da <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a22      	ldr	r2, [pc, #136]	; (8003160 <TIM_Base_SetConfig+0x138>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d108      	bne.n	80030ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a09      	ldr	r2, [pc, #36]	; (8003138 <TIM_Base_SetConfig+0x110>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_Base_SetConfig+0xf8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <TIM_Base_SetConfig+0x120>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d103      	bne.n	8003128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	615a      	str	r2, [r3, #20]
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40010000 	.word	0x40010000
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40010400 	.word	0x40010400
 800314c:	40014000 	.word	0x40014000
 8003150:	40014400 	.word	0x40014400
 8003154:	40014800 	.word	0x40014800
 8003158:	40001800 	.word	0x40001800
 800315c:	40001c00 	.word	0x40001c00
 8003160:	40002000 	.word	0x40002000

08003164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e03f      	b.n	800321a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd fd1c 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2224      	movs	r2, #36	; 0x24
 80031b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f829 	bl	8003224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4313      	orrs	r3, r2
 8003258:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003264:	f023 030c 	bic.w	r3, r3, #12
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	430b      	orrs	r3, r1
 8003270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699a      	ldr	r2, [r3, #24]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a57      	ldr	r2, [pc, #348]	; (80033ec <UART_SetConfig+0x1c8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <UART_SetConfig+0x78>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a56      	ldr	r2, [pc, #344]	; (80033f0 <UART_SetConfig+0x1cc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d103      	bne.n	80032a4 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800329c:	f7fe fd2c 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	e002      	b.n	80032aa <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032a4:	f7fe fd06 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 80032a8:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b2:	d14c      	bne.n	800334e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009a      	lsls	r2, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <UART_SetConfig+0x1d0>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	0119      	lsls	r1, r3, #4
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009a      	lsls	r2, r3, #2
 80032de:	441a      	add	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ea:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <UART_SetConfig+0x1d0>)
 80032ec:	fba3 0302 	umull	r0, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2064      	movs	r0, #100	; 0x64
 80032f4:	fb00 f303 	mul.w	r3, r0, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	3332      	adds	r3, #50	; 0x32
 80032fe:	4a3d      	ldr	r2, [pc, #244]	; (80033f4 <UART_SetConfig+0x1d0>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800330c:	4419      	add	r1, r3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	009a      	lsls	r2, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fbb2 f2f3 	udiv	r2, r2, r3
 8003324:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <UART_SetConfig+0x1d0>)
 8003326:	fba3 0302 	umull	r0, r3, r3, r2
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2064      	movs	r0, #100	; 0x64
 800332e:	fb00 f303 	mul.w	r3, r0, r3
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	3332      	adds	r3, #50	; 0x32
 8003338:	4a2e      	ldr	r2, [pc, #184]	; (80033f4 <UART_SetConfig+0x1d0>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	f003 0207 	and.w	r2, r3, #7
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	440a      	add	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800334c:	e04a      	b.n	80033e4 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009a      	lsls	r2, r3, #2
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <UART_SetConfig+0x1d0>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	0119      	lsls	r1, r3, #4
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009a      	lsls	r2, r3, #2
 8003378:	441a      	add	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	fbb2 f2f3 	udiv	r2, r2, r3
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <UART_SetConfig+0x1d0>)
 8003386:	fba3 0302 	umull	r0, r3, r3, r2
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2064      	movs	r0, #100	; 0x64
 800338e:	fb00 f303 	mul.w	r3, r0, r3
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	3332      	adds	r3, #50	; 0x32
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <UART_SetConfig+0x1d0>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a4:	4419      	add	r1, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	009a      	lsls	r2, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <UART_SetConfig+0x1d0>)
 80033be:	fba3 0302 	umull	r0, r3, r3, r2
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2064      	movs	r0, #100	; 0x64
 80033c6:	fb00 f303 	mul.w	r3, r0, r3
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	3332      	adds	r3, #50	; 0x32
 80033d0:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <UART_SetConfig+0x1d0>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	f003 020f 	and.w	r2, r3, #15
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	440a      	add	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40011000 	.word	0x40011000
 80033f0:	40011400 	.word	0x40011400
 80033f4:	51eb851f 	.word	0x51eb851f

080033f8 <__libc_init_array>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	2500      	movs	r5, #0
 80033fc:	4e0c      	ldr	r6, [pc, #48]	; (8003430 <__libc_init_array+0x38>)
 80033fe:	4c0d      	ldr	r4, [pc, #52]	; (8003434 <__libc_init_array+0x3c>)
 8003400:	1ba4      	subs	r4, r4, r6
 8003402:	10a4      	asrs	r4, r4, #2
 8003404:	42a5      	cmp	r5, r4
 8003406:	d109      	bne.n	800341c <__libc_init_array+0x24>
 8003408:	f000 f822 	bl	8003450 <_init>
 800340c:	2500      	movs	r5, #0
 800340e:	4e0a      	ldr	r6, [pc, #40]	; (8003438 <__libc_init_array+0x40>)
 8003410:	4c0a      	ldr	r4, [pc, #40]	; (800343c <__libc_init_array+0x44>)
 8003412:	1ba4      	subs	r4, r4, r6
 8003414:	10a4      	asrs	r4, r4, #2
 8003416:	42a5      	cmp	r5, r4
 8003418:	d105      	bne.n	8003426 <__libc_init_array+0x2e>
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003420:	4798      	blx	r3
 8003422:	3501      	adds	r5, #1
 8003424:	e7ee      	b.n	8003404 <__libc_init_array+0xc>
 8003426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800342a:	4798      	blx	r3
 800342c:	3501      	adds	r5, #1
 800342e:	e7f2      	b.n	8003416 <__libc_init_array+0x1e>
 8003430:	0800348c 	.word	0x0800348c
 8003434:	0800348c 	.word	0x0800348c
 8003438:	0800348c 	.word	0x0800348c
 800343c:	08003490 	.word	0x08003490

08003440 <memset>:
 8003440:	4603      	mov	r3, r0
 8003442:	4402      	add	r2, r0
 8003444:	4293      	cmp	r3, r2
 8003446:	d100      	bne.n	800344a <memset+0xa>
 8003448:	4770      	bx	lr
 800344a:	f803 1b01 	strb.w	r1, [r3], #1
 800344e:	e7f9      	b.n	8003444 <memset+0x4>

08003450 <_init>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr

0800345c <_fini>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr
